[
  {
    "userId": "test-user-123",
    "n8nId": "3pbxdpuFQHjmGkCu",
    "name": "cv  processing",
    "active": false,
    "workflowData": {
      "createdAt": "2025-08-20T18:21:52.998Z",
      "updatedAt": "2025-08-20T20:19:53.000Z",
      "id": "3pbxdpuFQHjmGkCu",
      "name": "cv  processing",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "b3d19683-0f3f-4a61-bb08-3a058fb5b0ab",
            "responseMode": "responseNode",
            "options": {}
          },
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 2,
          "position": [
            -2784,
            352
          ],
          "id": "87e5e248-0f7f-4e19-98ab-ede2ace7536a",
          "name": "Tool-Calendar-Webhook",
          "webhookId": "b3d19683-0f3f-4a61-bb08-3a058fb5b0ab"
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={\n    \"results\": [\n        {\n            \"toolCallId\": \"{{ $('Event = tool-call').item.json.body.message.toolWithToolCallList[0].toolCall.id }}\",\n            \"result\": \"We've got available slots at {{ $json.availSlots }}, do any of those work?\"\n        }\n    ]\n}",
            "options": {
              "responseCode": 200
            }
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.1,
          "position": [
            -448,
            -64
          ],
          "id": "65bfffc0-d97d-4f89-aacb-eb5369251e35",
          "name": "Respond to Webhook"
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={\n    \"results\": [\n        {\n            \"toolCallId\": \"{{ $('Event = tool-call').item.json.body.message.toolWithToolCallList[0].toolCall.id }}\",\n            \"result\": \"Hmm, that day is booked, we've got available slots at {{ $json.availSlots }}, for the following day. Do any of those work?\"\n        }\n    ]\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.1,
          "position": [
            -448,
            112
          ],
          "id": "6c7ad3b9-44e1-413c-8399-875950e4dad4",
          "name": "Respond to Webhook1"
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={\n    \"results\": [\n        {\n            \"toolCallId\": \"{{ $('Event = tool-call').item.json.body.message.toolWithToolCallList[0].toolCall.id }}\",\n            \"result\": \"Hmm, that day is booked, we've got available slots at {{ $json.availSlots }}, 2 days from then. Do any of those work?\"\n        }\n    ]\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.1,
          "position": [
            -448,
            288
          ],
          "id": "10f7311a-22c2-4951-b04f-5dea28fe4e68",
          "name": "Respond to Webhook2"
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={\n    \"results\": [\n        {\n            \"toolCallId\": \"{{ $('tool-call-name').item.json.body.message.toolCalls[0].id }}\",\n            \"result\": \"I've created your booking, you should receive an SMS confirmation with the meeting link shortly?\"\n        }\n    ]\n}",
            "options": {
              "responseCode": 200
            }
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.1,
          "position": [
            -1648,
            736
          ],
          "id": "98ebf0d2-1f07-47dd-9719-55becdeb8e25",
          "name": "Respond to Webhook3"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "7d7501f6-b357-4524-9c8d-75b29e1a820b",
                  "name": "startTime",
                  "value": "={{ DateTime.fromISO($json.body.message.toolCalls[0].function.arguments.requestedTime).toFormat(\"yyyy-MM-dd\") + \"T09:00:00+11:00\" }}",
                  "type": "string"
                },
                {
                  "id": "c33c40ee-7dac-4159-9def-3eb977cf51d8",
                  "name": "attempt",
                  "value": "=0",
                  "type": "number"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -2064,
            112
          ],
          "id": "e8180cba-e677-46a7-aa25-74825994271e",
          "name": "Start Time + Attempt"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "7d7501f6-b357-4524-9c8d-75b29e1a820b",
                  "name": "startTime",
                  "value": "={{ $json.startTime }}",
                  "type": "string"
                },
                {
                  "id": "c33c40ee-7dac-4159-9def-3eb977cf51d8",
                  "name": "attempt",
                  "value": "={{ $json.attempt }}",
                  "type": "number"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -2064,
            304
          ],
          "id": "8dd0832a-03f4-40a1-97e1-3a15f6351011",
          "name": "Start Time + Attempt 1"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "7d7501f6-b357-4524-9c8d-75b29e1a820b",
                  "name": "startTime",
                  "value": "={{ $json.startTime }}",
                  "type": "string"
                },
                {
                  "id": "c33c40ee-7dac-4159-9def-3eb977cf51d8",
                  "name": "attempt",
                  "value": "={{ $json.attempt }}",
                  "type": "number"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -2064,
            512
          ],
          "id": "2fe7fad0-f51f-480c-bd00-d4f50eac15cc",
          "name": "Start Time + Attempt 2"
        },
        {
          "parameters": {
            "url": "https://api.cal.com/v1/slots",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "calApi",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "eventTypeId",
                  "value": "xxxxxxxx"
                },
                {
                  "name": "startTime",
                  "value": "={{ $json.startTime }}"
                },
                {
                  "name": "endTime",
                  "value": "={{ DateTime.fromISO($json.startTime).plus({ hours: 8 }).toFormat(\"yyyy-MM-dd'T'HH:mm:ss+11:00\") }}"
                },
                {
                  "name": "timeZone",
                  "value": "Australia/Sydney"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1856,
            112
          ],
          "id": "e7e0efe0-d59a-4343-81ff-926139f3bbaa",
          "name": "AvailSlots",
          "notesInFlow": false,
          "alwaysOutputData": false,
          "credentials": {
            "calApi": {
              "id": "vQHFtNXhPhGzFSNw",
              "name": "Cal account"
            }
          }
        },
        {
          "parameters": {
            "url": "https://api.cal.com/v1/slots",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "calApi",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "eventTypeId",
                  "value": "xxxxxxx"
                },
                {
                  "name": "startTime",
                  "value": "={{ $json.startTime }}"
                },
                {
                  "name": "endTime",
                  "value": "={{ DateTime.fromISO($json.startTime).plus({ hours: 8 }).toFormat(\"yyyy-MM-dd'T'HH:mm:ss+11:00\") }}"
                },
                {
                  "name": "timeZone",
                  "value": "xxxxxxxx"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1856,
            304
          ],
          "id": "c08b6494-2b8a-41ec-b6c7-01c9fd61534f",
          "name": "AvailSlots1",
          "notesInFlow": false,
          "alwaysOutputData": false,
          "credentials": {
            "calApi": {
              "id": "vQHFtNXhPhGzFSNw",
              "name": "Cal account"
            }
          }
        },
        {
          "parameters": {
            "url": "https://api.cal.com/v1/slots",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "calApi",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "eventTypeId",
                  "value": "xxxxxxxx"
                },
                {
                  "name": "startTime",
                  "value": "={{ $json.startTime }}"
                },
                {
                  "name": "endTime",
                  "value": "={{ DateTime.fromISO($json.startTime).plus({ hours: 8 }).toFormat(\"yyyy-MM-dd'T'HH:mm:ss+11:00\") }}"
                },
                {
                  "name": "timeZone",
                  "value": "xxxxxxxx"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1856,
            512
          ],
          "id": "965967ba-0489-4c17-9d26-6a111979516f",
          "name": "AvailSlots2",
          "notesInFlow": false,
          "alwaysOutputData": false,
          "credentials": {
            "calApi": {
              "id": "vQHFtNXhPhGzFSNw",
              "name": "Cal account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\nif (items.length === 0) {\n    return [];\n}\n\nconst data = items[0].json;\n\n// Ensure \"attempt\" is set; default to 0 if missing\nconst attempt = data.attempt !== undefined ? data.attempt : 0;\n\n// The \"slots\" object might have multiple date keys. We only pick the first one.\nconst dateKeys = Object.keys(data.slots || {});\nif (dateKeys.length === 0) {\n  // No date keys => no slots at all, so return with empty availability\n  return [{\n    json: {\n      day: null,\n      availSlots: [],\n      startTime: data.startTime,\n      attempt: attempt\n    }\n  }];\n}\n\nconst dateKey = dateKeys[0]; // First available date\nconst timeSlots = data.slots[dateKey] || [];\n\n// Shuffle function\nconst shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\nconst shuffled = shuffleArray([...timeSlots]);\n\n// Slice first 3 slots\nconst sliced = shuffled.slice(0, 3);\n\n// Sort by time (assuming each slot has a \"time\" property)\nsliced.sort((a, b) => new Date(a.time) - new Date(b.time));\n\n// Return the processed data along with day, startTime, and attempt\nreturn [{\n  json: {\n    day: dateKey,\n    availSlots: sliced,\n    startTime: data.startTime,\n    attempt: attempt\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1648,
            112
          ],
          "id": "2927d845-2b49-4aca-b01c-36c19cedb77c",
          "name": "Slice + Shuffle"
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\nif (items.length === 0) {\n    return [];\n}\n\nconst data = items[0].json;\n\n// Ensure \"attempt\" is set; default to 1 if missing\nconst attempt = data.attempt !== undefined ? data.attempt : 1;\n\n// The \"slots\" object might have multiple date keys. We only pick the first one.\nconst dateKeys = Object.keys(data.slots || {});\nif (dateKeys.length === 0) {\n  // No date keys => no slots at all, so return with empty availability\n  return [{\n    json: {\n      day: null,\n      availSlots: [],\n      startTime: data.startTime,\n      attempt: attempt\n    }\n  }];\n}\n\nconst dateKey = dateKeys[0]; // First available date\nconst timeSlots = data.slots[dateKey] || [];\n\n// Shuffle function\nconst shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\nconst shuffled = shuffleArray([...timeSlots]);\n\n// Slice first 3 slots\nconst sliced = shuffled.slice(0, 3);\n\n// Sort by time (assuming each slot has a \"time\" property)\nsliced.sort((a, b) => new Date(a.time) - new Date(b.time));\n\n// Return the processed data along with day, startTime, and attempt\nreturn [{\n  json: {\n    day: dateKey,\n    availSlots: sliced,\n    startTime: data.startTime,\n    attempt: attempt\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1648,
            304
          ],
          "id": "22ece3c5-36e1-417b-ac0d-330995ffc2a7",
          "name": "Slice + Shuffle1"
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\nif (items.length === 0) {\n    return [];\n}\n\nconst data = items[0].json;\n\n// Ensure \"attempt\" is set; default to 1 if missing\nconst attempt = data.attempt !== undefined ? data.attempt : 2;\n\n// The \"slots\" object might have multiple date keys. We only pick the first one.\nconst dateKeys = Object.keys(data.slots || {});\nif (dateKeys.length === 0) {\n  // No date keys => no slots at all, so return with empty availability\n  return [{\n    json: {\n      day: null,\n      availSlots: [],\n      startTime: data.startTime,\n      attempt: attempt\n    }\n  }];\n}\n\nconst dateKey = dateKeys[0]; // First available date\nconst timeSlots = data.slots[dateKey] || [];\n\n// Shuffle function\nconst shuffleArray = (arr) => arr.sort(() => Math.random() - 0.5);\nconst shuffled = shuffleArray([...timeSlots]);\n\n// Slice first 3 slots\nconst sliced = shuffled.slice(0, 3);\n\n// Sort by time (assuming each slot has a \"time\" property)\nsliced.sort((a, b) => new Date(a.time) - new Date(b.time));\n\n// Return the processed data along with day, startTime, and attempt\nreturn [{\n  json: {\n    day: dateKey,\n    availSlots: sliced,\n    startTime: data.startTime,\n    attempt: attempt\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1648,
            512
          ],
          "id": "9713e9de-e36d-4102-a889-fae23fd862a6",
          "name": "Slice + Shuffle2"
        },
        {
          "parameters": {
            "jsCode": "const data = $input.first().json;\nconst availSlots = data.availSlots || [];\nconst attempt = data.attempt !== undefined ? Number(data.attempt) : 0;\nconst startTime = data.startTime;\n\n// If availSlots isn’t an array or is empty, return \"busy\"\nif (!Array.isArray(availSlots) || availSlots.length === 0) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\nfunction formatTime(dateInput) {\n  const d = new Date(dateInput);\n  const options = { \n    hour: 'numeric', \n    minute: 'numeric', \n    hour12: true, \n    timeZone: 'Australia/Sydney'\n  };\n  return d.toLocaleTimeString('en-AU', options);\n}\n\n// Filter out any slots without a valid \"time\" property\nconst validSlots = availSlots.filter(slot => slot.time);\nif (validSlots.length === 0) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\n// Format each valid slot's time and join them with commas\nconst formatted = validSlots\n  .map(slot => formatTime(slot.time))\n  .join(', ');\n\n// If the formatted string is empty, return \"busy\"\nif (!formatted) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    availSlots: formatted,  // e.g. \"10:00 am, 10:15 am, 12:30 pm\"\n    attempt,\n    startTime\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1472,
            112
          ],
          "id": "4473a6c6-8de5-4de0-b249-74f7e82df2e2",
          "name": "Format + Filter"
        },
        {
          "parameters": {
            "jsCode": "const data = $input.first().json;\nconst availSlots = data.availSlots || [];\nconst attempt = data.attempt !== undefined ? Number(data.attempt) : 1;\nconst startTime = data.startTime;\n\n// If availSlots isn’t an array or is empty, return \"busy\"\nif (!Array.isArray(availSlots) || availSlots.length === 0) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\nfunction formatTime(dateInput) {\n  const d = new Date(dateInput);\n  const options = { \n    hour: 'numeric', \n    minute: 'numeric', \n    hour12: true, \n    timeZone: 'Australia/Sydney'\n  };\n  return d.toLocaleTimeString('en-AU', options);\n}\n\n// Filter out any slots without a valid \"time\" property\nconst validSlots = availSlots.filter(slot => slot.time);\nif (validSlots.length === 0) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\n// Format each valid slot's time and join them with commas\nconst formatted = validSlots\n  .map(slot => formatTime(slot.time))\n  .join(', ');\n\n// If the formatted string is empty, return \"busy\"\nif (!formatted) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    availSlots: formatted,  // e.g. \"10:00 am, 10:15 am, 12:30 pm\"\n    attempt,\n    startTime\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1472,
            304
          ],
          "id": "70381197-780f-4acc-a3f0-166e8f505149",
          "name": "Format + Filter1"
        },
        {
          "parameters": {
            "jsCode": "const data = $input.first().json;\nconst availSlots = data.availSlots || [];\nconst attempt = data.attempt !== undefined ? Number(data.attempt) : 2;\nconst startTime = data.startTime;\n\n// If availSlots isn’t an array or is empty, return \"busy\"\nif (!Array.isArray(availSlots) || availSlots.length === 0) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\nfunction formatTime(dateInput) {\n  const d = new Date(dateInput);\n  const options = { \n    hour: 'numeric', \n    minute: 'numeric', \n    hour12: true, \n    timeZone: 'Australia/Sydney'\n  };\n  return d.toLocaleTimeString('en-AU', options);\n}\n\n// Filter out any slots without a valid \"time\" property\nconst validSlots = availSlots.filter(slot => slot.time);\nif (validSlots.length === 0) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\n// Format each valid slot's time and join them with commas\nconst formatted = validSlots\n  .map(slot => formatTime(slot.time))\n  .join(', ');\n\n// If the formatted string is empty, return \"busy\"\nif (!formatted) {\n  return [{\n    json: {\n      availSlots: \"busy\",\n      attempt,\n      startTime\n    }\n  }];\n}\n\nreturn [{\n  json: {\n    availSlots: formatted,  // e.g. \"10:00 am, 10:15 am, 12:30 pm\"\n    attempt,\n    startTime\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -1472,
            512
          ],
          "id": "e76c8107-57a6-4e34-b9b1-ad6a667c9c8e",
          "name": "Format + Filter2"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "df7e5dbc-826e-4763-9a85-87c8136155de",
                  "leftValue": "={{ $json.availSlots }}",
                  "rightValue": "busy",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -1296,
            112
          ],
          "id": "6a73ab16-3fa0-4691-8c27-510c1bce9064",
          "name": "If Time Busy"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "df7e5dbc-826e-4763-9a85-87c8136155de",
                  "leftValue": "={{ $json.availSlots }}",
                  "rightValue": "busy",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -1296,
            304
          ],
          "id": "96016764-6086-4b41-9d07-7166d44cdbfb",
          "name": "If Time Busy1"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "df7e5dbc-826e-4763-9a85-87c8136155de",
                  "leftValue": "={{ $json.availSlots }}",
                  "rightValue": "busy",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -1296,
            512
          ],
          "id": "159efad4-a92c-4348-915a-0deda9ac8b60",
          "name": "If Time Busy2"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "1b2209d1-322e-44be-acd2-dfc0fb278e9d",
                  "name": "attempt",
                  "value": "={{ Number($('Format + Filter').item.json.attempt) + 1 }}",
                  "type": "number"
                },
                {
                  "id": "ba93469a-3aa6-4f22-ad70-8be06d8c4719",
                  "name": "startTime",
                  "value": "={{ DateTime.fromISO($(\"Start Time + Attempt\").item.json.startTime, { setZone: true }).plus({ days: 1 }).toFormat(\"yyyy-MM-dd\")+\"T09:00:00+11:00\" }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -1072,
            -32
          ],
          "id": "f42357cf-fcb6-405b-b3d6-d8232bdddd06",
          "name": "+1 Day / Attempt"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "1b2209d1-322e-44be-acd2-dfc0fb278e9d",
                  "name": "attempt",
                  "value": "={{ Number($('Format + Filter1').item.json.attempt) + 1 }}",
                  "type": "number"
                },
                {
                  "id": "ba93469a-3aa6-4f22-ad70-8be06d8c4719",
                  "name": "startTime",
                  "value": "={{ DateTime.fromISO($(\"Start Time + Attempt 1\").item.json.startTime, { setZone: true }).plus({ days: 1 }).toFormat(\"yyyy-MM-dd\")+\"T09:00:00+11:00\" }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -1072,
            272
          ],
          "id": "5c85c451-c869-4757-ada8-df7d553c23f0",
          "name": "+1 Day / Attempt1"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "1b2209d1-322e-44be-acd2-dfc0fb278e9d",
                  "name": "attempt",
                  "value": "={{ Number($('Format + Filter2').item.json.attempt) + 1 }}",
                  "type": "number"
                },
                {
                  "id": "ba93469a-3aa6-4f22-ad70-8be06d8c4719",
                  "name": "startTime",
                  "value": "={{ DateTime.fromISO($(\"Start Time + Attempt 2\").item.json.startTime, { setZone: true }).plus({ days: 1 }).toFormat(\"yyyy-MM-dd\")+\"T09:00:00+11:00\" }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -1072,
            544
          ],
          "id": "121a65f7-585d-48a2-8a9b-77f283e66c6a",
          "name": "+1 Day / Attempt2"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "01279cc4-23ea-4722-bc73-57428d89de78",
                  "leftValue": "={{ $('Format + Filter').item.json.attempt }}",
                  "rightValue": 2,
                  "operator": {
                    "type": "number",
                    "operation": "lt"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -864,
            -32
          ],
          "id": "324577ed-c06d-4505-92e7-f7d7685f829d",
          "name": "Attempt Check"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "01279cc4-23ea-4722-bc73-57428d89de78",
                  "leftValue": "={{ $('Format + Filter').item.json.attempt }}",
                  "rightValue": 2,
                  "operator": {
                    "type": "number",
                    "operation": "notEquals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -864,
            272
          ],
          "id": "f9eeb40a-2e2d-4732-9cf9-91f0489c3052",
          "name": "Attempt Check1"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "01279cc4-23ea-4722-bc73-57428d89de78",
                  "leftValue": "={{ $('Format + Filter').item.json.attempt }}",
                  "rightValue": 3,
                  "operator": {
                    "type": "number",
                    "operation": "notEquals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -864,
            544
          ],
          "id": "f9aeadcf-f0e4-4c9b-a549-3166a5332271",
          "name": "Attempt Check2"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "cece0c40-322b-4bec-91d4-f00a2fe85da6",
                  "name": "requestedTime",
                  "value": "={{ $json.body.message.toolCalls[0].function.arguments.requestedTime }}",
                  "type": "string"
                },
                {
                  "id": "434329fd-ca96-4e2d-9362-0114ba4f9132",
                  "name": "name",
                  "value": "={{ $json.body.message.toolWithToolCallList[0].toolCall.function.arguments.name }}",
                  "type": "string"
                },
                {
                  "id": "6cc111d9-b853-457c-b89a-77cba13dfa2d",
                  "name": "reason",
                  "value": "={{ $json.body.message.toolWithToolCallList[0].toolCall.function.arguments.reason }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -2064,
            736
          ],
          "id": "6b31b9de-a5a5-4bfc-81a1-ab19413b1298",
          "name": "Arguments"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://api.cal.com/v1/bookings",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "calApi",
            "sendBody": true,
            "specifyBody": "json",
            "jsonBody": "={\n  \"eventTypeId\": xxxxx,\n  \"start\": \"{{ $json.requestedTime }}+11:00\",\n  \"responses\": {\n    \"name\": \"{{ $json.name }}\",     \n    \"email\": \"xxxxx\",\n    \"Phone\":  \"xxxxx\", \n    \"title\": \"Booking with {{ $json.name }}, and xxxxx\",\n     \"location\": {\n      \"value\": \"integrations:google:meet\",\n      \"optionValue\": \"\"\n\n    }\n  },\n  \"metadata\": {},\n  \"timeZone\": \"xxxxxx\",  \n  \"language\": \"en\",\n  \"description\": \"Discovery - {{ $json.reason }}\",\n  \"status\": \"ACCEPTED\",\n  \"smsReminderNumber\": null\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1856,
            736
          ],
          "id": "e5ecebca-f915-4071-b5ea-3bb30a7b26df",
          "name": "BookSlot",
          "credentials": {
            "calApi": {
              "id": "vQHFtNXhPhGzFSNw",
              "name": "Cal account"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "36dc2d36-a7e7-487b-8698-233e0bc9e05a",
                  "leftValue": "={{ $json.body.message.type }}",
                  "rightValue": "tool-calls",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -2560,
            352
          ],
          "id": "ef1baa2e-1f54-4e6b-aa0d-4e4965759cc2",
          "name": "Event = tool-call"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "7fced170-16e0-4a5d-b3e2-1ac61c101be1",
                  "leftValue": "={{ $json.body.message.toolWithToolCallList[0].function.name }}",
                  "rightValue": "checkCalendarN8N",
                  "operator": {
                    "type": "string",
                    "operation": "equals",
                    "name": "filter.operator.equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -2320,
            352
          ],
          "id": "6478e317-169a-4dcf-877d-a4f0714d2fe5",
          "name": "tool-call-name"
        },
        {
          "parameters": {
            "from": "xxxxxxxxxxxx",
            "to": "={{ $('tool-call-name').item.json.body.message.call.customer.number }}",
            "message": "=Hey {{ $json.responses.name }},\n\nYour booking has been created for {{ $('tool-call-name').item.json.body.message.toolCalls[0].function.arguments.requestedTime }}.\n\nYou can join the meeting from this link:\n{{ $json.references[0].meetingUrl }}\n\nThank you for your time on the phone. Look forward to meeting. \n\nRegards, \nSam - Talk AI",
            "options": {}
          },
          "type": "n8n-nodes-base.twilio",
          "typeVersion": 1,
          "position": [
            -1472,
            736
          ],
          "id": "1deb1587-452b-450b-b929-e5bdad457260",
          "name": "Twilio",
          "credentials": {
            "twilioApi": {
              "id": "m4t8oF4IALm9uzc6",
              "name": "Twilio account"
            }
          }
        },
        {
          "parameters": {
            "respondWith": "json",
            "responseBody": "={\n    \"results\": [\n        {\n            \"toolCallId\": \"{{ $('Event = tool-call').item.json.body.message.toolWithToolCallList[0].toolCall.id }}\",\n            \"result\": \"Looks like we are fully booked, did you want to call back in a few days?\"\n        }\n    ]\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.respondToWebhook",
          "typeVersion": 1.1,
          "position": [
            -448,
            512
          ],
          "id": "a5e5a3c7-68e8-4d4e-9937-078d7e512cb3",
          "name": "Respond to Webhook4"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "xxxx",
              "mode": "id"
            },
            "table": {
              "__rl": true,
              "value": "xxxx",
              "mode": "id"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "Meeting Time": "={{ $('tool-call-name').item.json.body.message.toolCalls[0].function.arguments.requestedTime }}",
                "Status": "Booked",
                "Meeting Link": "={{ $('Respond to Webhook3').item.json.references[0].meetingUrl }}",
                "Name": "={{ $('Respond to Webhook3').item.json.responses.name }}",
                "Number": "={{ $('tool-call-name').item.json.body.message.call.customer.number }}",
                "Reason": "={{ $('Respond to Webhook3').item.json.responses.title }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "Name",
                  "displayName": "Name",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Number",
                  "displayName": "Number",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Reason",
                  "displayName": "Reason",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Meeting Time",
                  "displayName": "Meeting Time",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Meeting Link",
                  "displayName": "Meeting Link",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Status",
                  "displayName": "Status",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Booked",
                      "value": "Booked"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Assignee",
                  "displayName": "Assignee",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            -1296,
            736
          ],
          "id": "cfe88ca4-8bcc-4576-b111-9833605732fb",
          "name": "Booking Record"
        },
        {
          "parameters": {
            "operation": "create",
            "base": {
              "__rl": true,
              "value": "xxxx",
              "mode": "id"
            },
            "table": {
              "__rl": true,
              "value": "xxxx",
              "mode": "id"
            },
            "columns": {
              "mappingMode": "defineBelow",
              "value": {
                "currency": 0,
                "started": "={{ $('Event = tool-call').item.json.body.message.startedAt }}",
                "ended": "={{ $('Event = tool-call').item.json.body.message.endedAt }}",
                "ended reason": "={{ $('Event = tool-call').item.json.body.message.endedReason }}",
                "cost(stt)": "={{ $('Event = tool-call').item.json.body.message.costBreakdown.stt }}",
                "cost(llm)": "={{ $('Event = tool-call').item.json.body.message.costBreakdown.llm }}",
                "cost(tts)": "={{ $('Event = tool-call').item.json.body.message.costBreakdown.tts }}",
                "cost(vapi)": "={{ $('Event = tool-call').item.json.body.message.costBreakdown.vapi }}",
                "cost(total)": "={{ $('Event = tool-call').item.json.body.message.costBreakdown.total }}",
                "id": "={{ $('Event = tool-call').item.json.body.message.call.id }}",
                "callproviderID": "={{ $('Event = tool-call').item.json.body.message.call.phoneCallProviderId }}",
                "customernumber": "={{ $json.number }}",
                "phonenumberID": "={{ $('Event = tool-call').item.json.body.message.phoneNumber.id }}",
                "transcript": "={{ $('Event = tool-call').item.json.body.message.transcript }}",
                "recording": "={{ $('Event = tool-call').item.json.body.message.recordingUrl }}",
                "type": "={{ $('Event = tool-call').item.json.body.message.call.type }}",
                "milliseconds": "={{ $('Event = tool-call').item.json.body.message.durationMs }}"
              },
              "matchingColumns": [],
              "schema": [
                {
                  "id": "id",
                  "displayName": "id",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "callproviderID",
                  "displayName": "callproviderID",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "phonenumberID",
                  "displayName": "phonenumberID",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "customername",
                  "displayName": "customername",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "customernumber",
                  "displayName": "customernumber",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "type",
                  "displayName": "type",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "started",
                  "displayName": "started",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "ended",
                  "displayName": "ended",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "milliseconds",
                  "displayName": "milliseconds",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(stt)",
                  "displayName": "cost(stt)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(llm)",
                  "displayName": "cost(llm)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(tts)",
                  "displayName": "cost(tts)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(vapi)",
                  "displayName": "cost(vapi)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(total)",
                  "displayName": "cost(total)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(twilio)",
                  "displayName": "cost(twilio)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(totals)",
                  "displayName": "cost(totals)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": false
                },
                {
                  "id": "currency",
                  "displayName": "currency",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "number",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "cost(aud)",
                  "displayName": "cost(aud)",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": true,
                  "removed": false
                },
                {
                  "id": "ended reason",
                  "displayName": "ended reason",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Booking Time",
                  "displayName": "Booking Time",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "Meeting Link",
                  "displayName": "Meeting Link",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "outcome",
                  "displayName": "outcome",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "options",
                  "options": [
                    {
                      "name": "Booked",
                      "value": "Booked"
                    },
                    {
                      "name": "Interested",
                      "value": "Interested"
                    },
                    {
                      "name": "Unqualified",
                      "value": "Unqualified"
                    },
                    {
                      "name": "Voicemail",
                      "value": "Voicemail"
                    },
                    {
                      "name": "Failed",
                      "value": "Failed"
                    }
                  ],
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "transcript",
                  "displayName": "transcript",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                },
                {
                  "id": "recording",
                  "displayName": "recording",
                  "required": false,
                  "defaultMatch": false,
                  "canBeUsedToMatch": true,
                  "display": true,
                  "type": "string",
                  "readOnly": false,
                  "removed": false
                }
              ],
              "attemptToConvertTypes": false,
              "convertFieldsToString": false
            },
            "options": {}
          },
          "type": "n8n-nodes-base.airtable",
          "typeVersion": 2.1,
          "position": [
            -1856,
            928
          ],
          "id": "c998e67a-2c30-46d2-9083-b9777a38add1",
          "name": "Raw Data Record "
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "d86411b9-9043-42ff-938a-d35198eee0d4",
                  "name": "number",
                  "value": "={{ $json.body.message.call.customer.number }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            -2064,
            928
          ],
          "id": "123ffe7f-399f-4ede-82af-adbeaad4c2c4",
          "name": "Customer Number"
        },
        {
          "parameters": {
            "authentication": "oAuth2",
            "select": "channel",
            "channelId": {
              "__rl": true,
              "value": "C07PZHX72M8",
              "mode": "list",
              "cachedResultName": "sales"
            },
            "text": "=*_New booking created for {{ $('Respond to Webhook3').item.json.responses.name }}_*\n\n*Contact Number:* {{ $('tool-call-name').item.json.body.message.call.customer.number }}\n\nBooking time: {{ $('tool-call-name').item.json.body.message.toolCalls[0].function.arguments.requestedTime }}\n\nBooking link: {{ $('Respond to Webhook3').item.json.references[0].meetingUrl }}\n\n<@U07S12BK5MH> <@U07S12D24CT>",
            "otherOptions": {}
          },
          "type": "n8n-nodes-base.slack",
          "typeVersion": 2.3,
          "position": [
            -1104,
            736
          ],
          "id": "f9f17cc6-b7d0-4004-9964-f22c727711c0",
          "name": "Notify Team",
          "webhookId": "77a14917-4a83-453f-99d8-1393fc883335"
        },
        {
          "parameters": {
            "content": "## If request time = free; \n- \"We've got available slots at {{ $json.availSlots }}, do any of those work?\"",
            "width": 336,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -224,
            -112
          ],
          "typeVersion": 1,
          "id": "2109c057-27d9-47d0-9bee-bb7ead1f894c",
          "name": "Sticky Note2"
        },
        {
          "parameters": {
            "content": "## If user request time + 1 day = free; \n- \"Hmm, that day is booked, we've got available slots at {{ $json.availSlots }}, for the following day. Do any of those work?\"",
            "width": 340,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -224,
            96
          ],
          "typeVersion": 1,
          "id": "53061d12-887e-41ea-8369-cf1f084fe343",
          "name": "Sticky Note3"
        },
        {
          "parameters": {
            "content": "## If user request time + 2 day = free; \n- \"Hmm, that day is booked, we've got available slots at {{ $json.availSlots }}, 2 days from then. Do any of those work?\"",
            "width": 340,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -224,
            288
          ],
          "typeVersion": 1,
          "id": "d355ab26-5eee-4357-875e-61af2738a93a",
          "name": "Sticky Note4"
        },
        {
          "parameters": {
            "content": "## If user request time = busy; \n- \"Looks like we are fully booked, did you want to call back in a few days?\"",
            "width": 340,
            "color": 3
          },
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            -224,
            496
          ],
          "typeVersion": 1,
          "id": "ce7472a5-363a-4c5e-adbd-2822c08a6cc5",
          "name": "Sticky Note5"
        }
      ],
      "connections": {
        "Tool-Calendar-Webhook": {
          "main": [
            [
              {
                "node": "Event = tool-call",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Respond to Webhook3": {
          "main": [
            [
              {
                "node": "Twilio",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Start Time + Attempt": {
          "main": [
            [
              {
                "node": "AvailSlots",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Start Time + Attempt 1": {
          "main": [
            [
              {
                "node": "AvailSlots1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Start Time + Attempt 2": {
          "main": [
            [
              {
                "node": "AvailSlots2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AvailSlots": {
          "main": [
            [
              {
                "node": "Slice + Shuffle",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AvailSlots1": {
          "main": [
            [
              {
                "node": "Slice + Shuffle1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AvailSlots2": {
          "main": [
            [
              {
                "node": "Slice + Shuffle2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Slice + Shuffle": {
          "main": [
            [
              {
                "node": "Format + Filter",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Slice + Shuffle1": {
          "main": [
            [
              {
                "node": "Format + Filter1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Slice + Shuffle2": {
          "main": [
            [
              {
                "node": "Format + Filter2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format + Filter": {
          "main": [
            [
              {
                "node": "If Time Busy",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format + Filter1": {
          "main": [
            [
              {
                "node": "If Time Busy1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format + Filter2": {
          "main": [
            [
              {
                "node": "If Time Busy2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If Time Busy": {
          "main": [
            [
              {
                "node": "+1 Day / Attempt",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If Time Busy1": {
          "main": [
            [
              {
                "node": "+1 Day / Attempt1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If Time Busy2": {
          "main": [
            [
              {
                "node": "+1 Day / Attempt2",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "+1 Day / Attempt": {
          "main": [
            [
              {
                "node": "Attempt Check",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "+1 Day / Attempt1": {
          "main": [
            [
              {
                "node": "Attempt Check1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "+1 Day / Attempt2": {
          "main": [
            [
              {
                "node": "Attempt Check2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Attempt Check": {
          "main": [
            [
              {
                "node": "Start Time + Attempt 1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Attempt Check1": {
          "main": [
            [
              {
                "node": "Start Time + Attempt 2",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Attempt Check2": {
          "main": [
            [
              {
                "node": "Respond to Webhook4",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Respond to Webhook2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Arguments": {
          "main": [
            [
              {
                "node": "BookSlot",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "BookSlot": {
          "main": [
            [
              {
                "node": "Respond to Webhook3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Event = tool-call": {
          "main": [
            [
              {
                "node": "tool-call-name",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Customer Number",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "tool-call-name": {
          "main": [
            [
              {
                "node": "Start Time + Attempt",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Arguments",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Twilio": {
          "main": [
            [
              {
                "node": "Booking Record",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Customer Number": {
          "main": [
            [
              {
                "node": "Raw Data Record ",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Booking Record": {
          "main": [
            [
              {
                "node": "Notify Team",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "d66cc455-4308-4500-827c-f189cf521691",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-08-20T18:21:53.033Z",
          "updatedAt": "2025-08-20T18:21:53.033Z",
          "role": "workflow:owner",
          "workflowId": "3pbxdpuFQHjmGkCu",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "d66cc455-4308-4500-827c-f189cf521691",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:31:58.922Z",
      "updatedAt": "2025-08-25T11:31:58.924Z"
    },
    "status": "inactive",
    "createdAt": "2025-08-25T11:31:58.924Z",
    "updatedAt": "2025-08-25T11:31:58.924Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "DZzPvMkxrdfsnp4Y",
    "name": "My workflow 3",
    "active": false,
    "workflowData": {
      "createdAt": "2025-08-25T07:28:51.783Z",
      "updatedAt": "2025-08-25T07:28:51.783Z",
      "id": "DZzPvMkxrdfsnp4Y",
      "name": "My workflow 3",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            -2368,
            416
          ],
          "id": "d2f99083-ab99-4083-a632-1041e159f472",
          "name": "Loop Over Items3"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "minutes",
                  "minutesInterval": 2
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -3280,
            384
          ],
          "id": "6ce442ee-2e95-4d85-85b6-91ff58a43cdd",
          "name": "Schedule Trigger1"
        },
        {
          "parameters": {
            "operation": "getAll",
            "simple": false,
            "filters": {
              "q": "has:attachment is:unread"
            },
            "options": {
              "downloadAttachments": true
            }
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            -2912,
            384
          ],
          "id": "ee8edb67-d2cf-4f84-9ea6-8129a36a3cd5",
          "name": "Get Emails",
          "webhookId": "98f3ce75-e47c-499b-a4f8-fa4f99ed0e22",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "fca5cf7a-004e-4169-a2ae-2832e76e5d1d",
                  "leftValue": "={{ $binary.attachment_0.fileName }}",
                  "rightValue": ".pdf",
                  "operator": {
                    "type": "string",
                    "operation": "endsWith"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            -2624,
            240
          ],
          "id": "8eb343a0-0bcf-47aa-8c5e-68cf162faccd",
          "name": "Differentiating Between Mail msgs"
        },
        {
          "parameters": {
            "inputDataFieldName": "attachment_0",
            "name": "={{ $binary.attachment_0.fileName }}|",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "root",
              "mode": "list",
              "cachedResultName": "/ (Root folder)",
              "cachedResultUrl": "https://drive.google.com/drive"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -2176,
            96
          ],
          "id": "7f71dd58-a57b-4382-85e7-5ab64ced8109",
          "name": "Upload Cv",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "markAsRead",
            "messageId": "={{ $('Get Emails').item.json.id }}"
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            -1952,
            96
          ],
          "id": "2f7fff36-1f86-45a4-a781-da6c768958ce",
          "name": "Mark a message as read",
          "webhookId": "03717270-0d73-4c94-afe2-63e191b948ca",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          },
          "disabled": true
        },
        {
          "parameters": {
            "url": "\thttps://www.googleapis.com/drive/v3/files?q='1Hx2eKRWrwXLMMx7jEU5gr5JmZA26HZwM'+in+parents and trashed=false",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "googleDriveOAuth2Api",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "fields",
                  "value": "files(id,name,mimeType)"
                },
                {
                  "name": "pageSize",
                  "value": "1"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -1728,
            96
          ],
          "id": "4cbbb730-6049-43b2-b094-a2b8e78c9e0f",
          "name": "Getting Essential Info",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "download",
            "fileId": {
              "__rl": true,
              "value": "={{ $('Upload Cv').item.json.id }}",
              "mode": "id"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -1504,
            96
          ],
          "id": "18425cce-0436-4ea8-8199-73d8b4e1e703",
          "name": "Download Cv",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -1280,
            96
          ],
          "id": "7a1e2b57-0c62-49d7-ae92-a489769d2388",
          "name": "Extracting Info"
        },
        {
          "parameters": {
            "collection": "jobCriteria",
            "options": {},
            "query": "={\n  \"$and\": [\n    {\n      \"userId\": \"{{ $json._id }}\"\n    },\n    {\n      \"Job Title\": {\n        \"$in\": {{ JSON.stringify($('Parse Ai Output').item.json.jobTitleVariations) }}\n      }\n    }\n  ]\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -224,
            96
          ],
          "id": "5c3e67b3-b741-460b-8f6c-4563b5ed035f",
          "name": "MongoDB JobPosted",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// 1. Get all necessary inputs from previous nodes\nconst matchedJob = $input.first().json;\nconst candidateData = $('Parse Ai Output').first().json;\nconst jobSkillsLlmOutput = $('Ai variations2').first().json;\nconst emailData = $('Get Emails').first().json;\nconst fileData = $('Upload Cv').first().json;\n\n// 2. Handle the case where no job was found from MongoDB\nif (!matchedJob || Object.keys(matchedJob).length === 0) {\n  return [{\n    json: {\n      match: false,\n      error: `No matching job was found for the application with subject: \"${emailData.subject}\"`,\n      emailSubject: emailData.subject,\n      originalFilename: fileData.name\n    }\n  }];\n}\n\n// 3. Extract candidate info from the 'Parse Ai Output' node\nconst candidateName = candidateData.personName || 'N/A';\nconst candidateSkillsFromLLM = candidateData.skills || {};\n\n// 4. Parse the AI output for the JOB's required skill variations\nlet jobSkillVariations = {};\ntry {\n  // The raw output from this AI node is a string that needs to be cleaned and parsed\n  const rawText = jobSkillsLlmOutput.choices[0].message.content;\n  const cleanedText = rawText.replace(/^```json\\s*/, '').replace(/\\s*```$/, '').trim();\n  jobSkillVariations = JSON.parse(cleanedText);\n} catch (error) {\n  console.error(\"Error parsing AI variations for job skills:\", error);\n  // If parsing fails, we can continue with an empty object\n}\n\n// 5. Create a flattened set of all skill variations the CANDIDATE has for fast lookups\nconst candidateSkillVariationsSet = new Set();\nfor (const skillKey in candidateSkillsFromLLM) {\n  const variations = candidateSkillsFromLLM[skillKey];\n  if (Array.isArray(variations)) {\n    variations.forEach(variation => {\n      candidateSkillVariationsSet.add(variation.toLowerCase());\n    });\n  }\n}\n\n// 6. Function to check if a required skill is present in the candidate's skill set\nconst isSkillPresent = (requiredSkill, allJobSkillVariations, candidateSkills) => {\n  const normalizedRequiredSkill = requiredSkill.toLowerCase().trim();\n  // Get the list of variations for the required skill, or just use the skill itself if no variations exist\n  const variationsToFind = allJobSkillVariations[normalizedRequiredSkill] || [normalizedRequiredSkill];\n  \n  // Check if any of the variations exist in the candidate's skill set\n  return variationsToFind.some(variation => candidateSkills.has(variation.toLowerCase()));\n};\n\n// 7. Get the job's required and optional skills from the MongoDB result\nconst requiredSkills = (matchedJob['Required Skills'] || []).map(s => s.trim()).filter(Boolean);\nconst optionalSkills = (matchedJob['Optional Skills'] || []).map(s => s.trim()).filter(Boolean);\n\n// 8. Calculate matches\nconst foundRequiredSkills = requiredSkills.filter(skill => isSkillPresent(skill, jobSkillVariations, candidateSkillVariationsSet));\nconst missingRequiredSkills = requiredSkills.filter(skill => !isSkillPresent(skill, jobSkillVariations, candidateSkillVariationsSet));\nconst foundOptionalSkills = optionalSkills.filter(skill => isSkillPresent(skill, jobSkillVariations, candidateSkillVariationsSet));\n\nconst match = missingRequiredSkills.length === 0;\nconst matchPercentage = requiredSkills.length > 0 ? Math.round((foundRequiredSkills.length / requiredSkills.length) * 100) : 100;\n\n// 9. Return the final structured output\nreturn [{\n  json: {\n    match: match,\n    matchPercentage: matchPercentage,\n    candidateName: candidateName,\n    jobTitle: matchedJob[\"Job Title\"],\n    jobId: matchedJob[\"Job ID\"],\n    foundSkills: foundRequiredSkills,\n    missingSkills: missingRequiredSkills,\n    foundOptionalSkills: foundOptionalSkills,\n    totalRequiredSkills: requiredSkills.length,\n    totalOptionalSkills: optionalSkills.length,\n    candidateEmail: emailData.from.value[0].address,\n    originalFilename: fileData.name,\n    googleDriveFileId: fileData.id,\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            0,
            192
          ],
          "id": "0f3c8c02-0204-444f-9218-c8132c762aef",
          "name": "Matching Skills"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "0705b104-0012-41d4-8fef-04315abe8a8b",
                  "leftValue": "={{ $json.match }}",
                  "rightValue": "",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            304,
            192
          ],
          "id": "3f5c84f6-66b5-4280-8b6e-26d0fc1ec057",
          "name": "If Candidate Qualifies"
        },
        {
          "parameters": {
            "collection": "candidates",
            "options": {
              "limit": 1,
              "sort": "{\n  \"_id\": -1\n}\n",
              "projection": "{\n  \"Candidate Name\": 1,\n  \"Email\": 1,\n  \"Interview Date\": 1,\n  \"Interview Time\": 1,\n  \"Calendar Event ID\":1,\n  \"_id\": 0\n}\n"
            },
            "query": "={\n  \"userId\": \"{{ $('Find documents').item.json._id }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            1072,
            96
          ],
          "id": "c018a121-6fc4-4917-a6e9-05a6d17610d7",
          "name": "MongoDB Candidate records",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// Enhanced scheduling script that prevents double-booking\n// Adds immediate slot reservation to prevent conflicts\n\n// Helper to get current time in Pakistan timezone (FIXED)\nfunction getCurrentPakistanTime() {\n    const now = new Date();\n    // Get the time in Pakistan timezone\n    const pakistanTime = new Date(now.getTime() + (now.getTimezoneOffset() * 60000) + (5 * 3600000));\n    return pakistanTime;\n}\n\n// Helper to format a Date object into a readable time like \"10:30 AM\"\nfunction formatToReadableTime(date) {\n    return date.toLocaleTimeString('en-US', {\n        timeZone: 'Asia/Karachi',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n    });\n}\n\n// Helper to format a Date object into a readable date string\nfunction formatToReadableDate(date) {\n    return date.toLocaleDateString('en-US', {\n        timeZone: 'Asia/Karachi',\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n}\n\n// Helper to check if a slot time is within business hours and weekdays\nfunction isValidBusinessTime(dateTime) {\n    if (!dateTime || !(dateTime instanceof Date)) {\n        return false;\n    }\n    \n    const pktDay = dateTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n    const pktHour = parseInt(dateTime.toLocaleTimeString('en-US', { \n        timeZone: 'Asia/Karachi', \n        hour12: false,\n        hour: '2-digit'\n    }));\n\n    if (pktDay === 'Sat' || pktDay === 'Sun') {\n        return false;\n    }\n    \n    if (pktHour < 10 || pktHour >= 16) {\n        return false;\n    }\n    \n    return true;\n}\n\n// Helper to check if a slot's END time is in the past\nfunction isPastCurrentTime(scheduleEndDateTime) {\n    if (!scheduleEndDateTime || !(scheduleEndDateTime instanceof Date)) {\n        return true;\n    }\n    return scheduleEndDateTime <= getCurrentPakistanTime();\n}\n\n// Helper to move to the next business day at 10:00 AM PKT\nfunction moveToNextBusinessDay(currentTime) {\n    let nextDay = new Date(currentTime);\n    nextDay.setUTCDate(nextDay.getUTCDate() + 1);\n    \n    const dayOfWeek = nextDay.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n    if (dayOfWeek === 'Sat') {\n        nextDay.setUTCDate(nextDay.getUTCDate() + 2);\n    } else if (dayOfWeek === 'Sun') {\n        nextDay.setUTCDate(nextDay.getUTCDate() + 1);\n    }\n    \n    nextDay.setUTCHours(5, 0, 0, 0);\n    return nextDay;\n}\n\n// FIXED: Proper ISO string formatting for Pakistan timezone\nfunction formatToISOString(date) {\n    // Create a new date adjusted for Pakistan timezone offset\n    const pakistanOffset = 5 * 60; // Pakistan is UTC+5\n    const pakistanTime = new Date(date.getTime());\n    \n    const year = pakistanTime.getUTCFullYear();\n    const month = String(pakistanTime.getUTCMonth() + 1).padStart(2, '0');\n    const day = String(pakistanTime.getUTCDate()).padStart(2, '0');\n    const hours = String(pakistanTime.getUTCHours()).padStart(2, '0');\n    const minutes = String(pakistanTime.getUTCMinutes()).padStart(2, '0');\n    const seconds = String(pakistanTime.getUTCSeconds()).padStart(2, '0');\n    \n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.000+05:00`;\n}\n\n// NEW: Function to create a temporary reservation\nfunction createTempReservation(startDateTime, endDateTime, reservationId) {\n    return {\n        startDateTime,\n        endDateTime,\n        source: 'temp_reservation',\n        reason: `Temporary reservation - ${reservationId}`,\n        id: reservationId,\n        isTemporary: true\n    };\n}\n\n// Main logic starts here\nconst allItems = items;\n\n// Generate a unique reservation ID for this scheduling request\nconst reservationId = `temp_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n\n// 1. Get calendar events from Google Calendar\nconst calendarEvents = $('Get many events').all();\nconst scheduledFromCalendar = calendarEvents\n    .filter(item => item.json && item.json.start && item.json.start.dateTime)\n    .map(item => {\n        const startDateTime = new Date(item.json.start.dateTime);\n        const endDateTime = item.json.end && item.json.end.dateTime \n            ? new Date(item.json.end.dateTime) \n            : new Date(startDateTime.getTime() + 30 * 60 * 1000);\n        return { \n            startDateTime, \n            endDateTime, \n            source: 'calendar',\n            id: item.json.id || 'unknown'\n        };\n    });\n\n// 2. Get unavailable slots from MongoDB\nconst unavailableSlots = $('Unavailable Slots').all();\nconst scheduledFromUnavailable = unavailableSlots\n    .filter(item => item.json && item.json.startTime && item.json.endTime)\n    .map(item => {\n        try {\n            const cleanStartTime = item.json.startTime.toString().replace(/['\"\\\\]/g, '');\n            const cleanEndTime = item.json.endTime.toString().replace(/['\"\\\\]/g, '');\n            \n            const startDateTime = new Date(cleanStartTime);\n            const endDateTime = new Date(cleanEndTime);\n            \n            if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {\n                console.error('Invalid date found in unavailable slot:', {\n                    original: item.json,\n                    cleaned: { startTime: cleanStartTime, endTime: cleanEndTime }\n                });\n                return null;\n            }\n            \n            return { \n                startDateTime, \n                endDateTime, \n                source: 'unavailable',\n                reason: item.json.reason || 'Unavailable',\n                id: item.json._id || 'unknown'\n            };\n        } catch (error) {\n            console.error('Error parsing unavailable slot:', error, item.json);\n            return null;\n        }\n    })\n    .filter(Boolean);\n\n// 3. NEW: Check for any existing temporary reservations (if you implement this)\n// You could add a MongoDB collection to store temporary reservations\nconst tempReservations = []; // This would come from a \"Get Temp Reservations\" node\n\n// 4. Combine all scheduled slots including temporary reservations\nconst allScheduledSlots = [...scheduledFromCalendar, ...scheduledFromUnavailable, ...tempReservations];\n\n// 5. Filter out past events\nconst allFutureSlots = allScheduledSlots.filter(slot =>\n    !isPastCurrentTime(slot.endDateTime)\n);\n\n// 6. Find the next available slot\nfunction getNextSlot(conflictingSlots) {\n    let searchTime = getCurrentPakistanTime();\n    const debugInfo = {\n        startingTime: searchTime.toISOString(),\n        reservationId: reservationId,\n        totalConflictingSlots: conflictingSlots.length\n    };\n    \n    // Round up to the next 30-minute mark\n    const currentMinutes = searchTime.getMinutes();\n    const minutesToAdd = currentMinutes % 30 === 0 ? 30 : 30 - (currentMinutes % 30);\n    searchTime = new Date(searchTime.getTime() + minutesToAdd * 60000);\n    searchTime.setSeconds(0, 0);\n    \n    let attemptCount = 0;\n    for (let i = 0; i < 2000; i++) {\n        attemptCount++;\n        \n        if (!isValidBusinessTime(searchTime)) {\n            if (searchTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' }) === 'Sat' || \n                searchTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' }) === 'Sun') {\n                searchTime = moveToNextBusinessDay(searchTime);\n            } else {\n                const pktHour = parseInt(searchTime.toLocaleTimeString('en-US', { \n                    timeZone: 'Asia/Karachi', \n                    hour12: false,\n                    hour: '2-digit'\n                }));\n                \n                if (pktHour >= 16) {\n                    searchTime = moveToNextBusinessDay(searchTime);\n                } else {\n                    searchTime = new Date(searchTime);\n                    searchTime.setUTCHours(5, 0, 0, 0);\n                }\n            }\n            continue;\n        }\n        \n        const proposedEnd = new Date(searchTime.getTime() + 30 * 60000);\n        \n        if (!isValidBusinessTime(new Date(proposedEnd.getTime() - 1000))) {\n            searchTime = moveToNextBusinessDay(searchTime);\n            continue;\n        }\n        \n        // Check for conflicts\n        const conflictingSlot = conflictingSlots.find(slot => {\n            const slotStart = slot.startDateTime;\n            const slotEnd = slot.endDateTime;\n            return (searchTime < slotEnd) && (slotStart < proposedEnd);\n        });\n        \n        if (!conflictingSlot) {\n            debugInfo.foundSlot = {\n                start: searchTime.toISOString(),\n                end: proposedEnd.toISOString(),\n                attempts: attemptCount\n            };\n            return { \n                startDateTime: searchTime, \n                endDateTime: proposedEnd, \n                debugInfo,\n                tempReservation: createTempReservation(searchTime, proposedEnd, reservationId)\n            };\n        }\n        \n        searchTime = new Date(searchTime.getTime() + 30 * 60000);\n    }\n\n    throw new Error(`Could not find an available slot within ${attemptCount} attempts.`);\n}\n\n// 7. Execute the logic\nconst nextAvailableSlot = getNextSlot(allFutureSlots);\n\n// 8. Format the output\nconst dateReadable = formatToReadableDate(nextAvailableSlot.startDateTime);\nconst startTimeReadable = formatToReadableTime(nextAvailableSlot.startDateTime);\nconst endTimeReadable = formatToReadableTime(nextAvailableSlot.endDateTime);\nconst startTimeISO = formatToISOString(nextAvailableSlot.startDateTime);\nconst endTimeISO = formatToISOString(nextAvailableSlot.endDateTime);\n\nreturn [{\n    json: {\n        // Human-readable formats\n        date: dateReadable,\n        startTime: startTimeReadable,\n        endTime: endTimeReadable,\n        // ISO formats\n        startTimeISO: startTimeISO,\n        endTimeISO: endTimeISO,\n        // NEW: Reservation info for immediate booking\n        reservationId: reservationId,\n        tempReservation: nextAvailableSlot.tempReservation,\n        // Debug info\n        debug: {\n            currentPakistanTime: getCurrentPakistanTime().toISOString(),\n            totalFutureSlots: allFutureSlots.length,\n            calendarEventsCount: scheduledFromCalendar.length,\n            unavailableSlotsCount: scheduledFromUnavailable.length,\n            searchProcess: nextAvailableSlot.debugInfo\n        }\n    }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1296,
            96
          ],
          "id": "02469162-8ab3-48e0-81d5-934432f71bfb",
          "name": "Candidate Info Fetch"
        },
        {
          "parameters": {
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "start": "={{ $json.startTimeISO }}",
            "end": "={{ $json.endTimeISO }}",
            "additionalFields": {
              "attendees": [
                "={{ $('Matching Skills').first().json.candidateEmail }}"
              ],
              "conferenceDataUi": {
                "conferenceDataValues": {
                  "conferenceSolution": "hangoutsMeet"
                }
              },
              "description": "=The candidate has the required skills in: {{ $('If Candidate Qualifies').first().json.foundSkills }}\nResume Link: https://drive.google.com/open?id={{ $('If Candidate Qualifies').first().json.googleDriveFileId }}\nCandidate email: {{ $('If Candidate Qualifies').first().json.candidateEmail }}\n",
              "summary": "=Interview With {{ $('Matching Skills').first().json.candidateName }} for {{ $('Matching Skills').first().json.jobTitle }}\n"
            }
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            1520,
            96
          ],
          "id": "db82dfb5-3c34-4331-9203-135831347c7d",
          "name": "Schedule a meeting",
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "Candidate Name",
                  "value": "={{ $('If Candidate Qualifies').first().json.candidateName }}"
                },
                {
                  "name": "Email",
                  "value": "={{ $('If Candidate Qualifies').first().json.candidateEmail }}"
                },
                {
                  "name": "Job Title",
                  "value": "={{ $('If Candidate Qualifies').first().json.jobTitle }}"
                },
                {
                  "name": "Interview Start",
                  "value": "={{ $('Candidate Info Fetch').item.json.startTimeISO }}"
                },
                {
                  "name": "Interview End",
                  "value": "={{ $('Candidate Info Fetch').item.json.endTimeISO }}"
                },
                {
                  "name": "Calendar Event ID",
                  "value": "={{ $('Schedule a meeting').item.json.id }}"
                },
                {
                  "name": "Calender Event Link",
                  "value": "={{ $('Schedule a meeting').item.json.htmlLink }}"
                },
                {
                  "name": "Google Meet Id",
                  "value": "={{ $('Schedule a meeting').item.json.conferenceData.entryPoints[0].label }}"
                },
                {
                  "name": "status",
                  "value": "Interview Scheduled"
                },
                {
                  "name": "Resume Link",
                  "value": "={{ $('Upload Cv').first().json.webViewLink }}"
                },
                {
                  "name": "userId",
                  "value": "={{ $('Find documents').first().json._id.toString().trim() }}"
                }
              ]
            },
            "options": {}
          },
          "name": "Set All info",
          "type": "n8n-nodes-base.set",
          "position": [
            1968,
            96
          ],
          "typeVersion": 1,
          "id": "aa351b4a-c8c7-47b1-8a32-2476674f4867"
        },
        {
          "parameters": {
            "operation": "insert",
            "collection": "candidates",
            "fields": "=Candidate Name, Email, Job Title, Interview Start, Interview End, Calendar Event ID, Calender Event Link, Google Meet Id, status, Resume Link, userId",
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            2192,
            96
          ],
          "id": "532aa10c-92a1-4b03-879d-2ebd1a84224c",
          "name": "MongoDB insert All Records",
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "move",
            "fileId": {
              "__rl": true,
              "value": "={{ $('Upload Cv').first().json.id }}",
              "mode": "id"
            },
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1tEfuIpyO8nbw7qyuTFcgrzzp-d65wnw-",
              "mode": "list",
              "cachedResultName": "Processed",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1tEfuIpyO8nbw7qyuTFcgrzzp-d65wnw-"
            }
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            3536,
            320
          ],
          "id": "e0c3ae5c-67f2-43bc-8ada-6c72bd3f6b9b",
          "name": "Move to Processed",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          },
          "disabled": true
        },
        {
          "parameters": {
            "operation": "deleteFile",
            "fileId": {
              "__rl": true,
              "value": "={{ $json.googleDriveFileId }}",
              "mode": "id"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            624,
            288
          ],
          "id": "685e32b3-e7bc-4f8c-b5da-35795d4371cf",
          "name": "Delete Unqualified Cv",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "getAll",
            "calendar": {
              "__rl": true,
              "value": "aestheticedits980@gmail.com",
              "mode": "list",
              "cachedResultName": "aestheticedits980@gmail.com"
            },
            "timeMax": "={{ $now.plus({ month: 1 }) }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            624,
            96
          ],
          "id": "95e5b07c-1a46-452b-9b17-9f1863c1f26d",
          "name": "Get many events",
          "alwaysOutputData": true,
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "jsCode": "// Get the output from the AI node\n\n// The .first().json will get the first item from the incoming data\n\nconst aiNodeOutput = $('Processing Candidate info').first().json;\n\n\n\n// Directly access the content object from the correct path\n\n// The desired data is inside the 'choices' array, then 'message', then 'content'\n\nconst parsedJson = aiNodeOutput.choices[0].message.content;\n\n\n\n// Return the object for the next nodes to use\n\nreturn [{ json: parsedJson }];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -656,
            96
          ],
          "id": "389f834b-c507-4359-a23a-9e78bb4563d6",
          "name": "Parse Ai Output"
        },
        {
          "parameters": {
            "jsCode": "// Get the required skills from the input\nconst requiredSkills = $json['Required Skills'];\n\n// Construct the prompt text. We are keeping it simple to be safe.\nconst promptText = \"For each skill in the array \" + JSON.stringify(requiredSkills) + \", create a JSON object. The keys should be the lowercase skill names, and the values should be an array of their common variations and typos. Return ONLY the JSON object, with no other text or markdown.\";\n\n// Build the final request body object\nconst geminiBody = {\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": promptText\n    }]\n  }]\n};\n\n// Return the complete body for the next node to use\nreturn [{ json: geminiBody }];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            0,
            0
          ],
          "id": "d14f847a-748e-4b7f-8f4b-a334cacfd389",
          "name": "Prepare Gemini Body"
        },
        {
          "parameters": {
            "collection": "unavailable_slots",
            "options": {},
            "query": "={\n  \"userId\": \"{{ $('Find documents').item.json._id }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            848,
            96
          ],
          "id": "b03cd17f-ed72-41bf-b936-30dec049143a",
          "name": "Unavailable Slots",
          "alwaysOutputData": true,
          "executeOnce": false,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "sendTo": "={{ $('If Candidate Qualifies').first().json.candidateEmail }}",
            "subject": "=Interview at Ideofuzion for {{ $('If Candidate Qualifies').first().json.jobTitle }}",
            "message": "=<div style=\"font-family: Arial, sans-serif; line-height: 1.6; font-size: 15px; color: #333;\">\n  <p>Dear <strong>{{ $('If Candidate Qualifies').first().json.candidateName }}</strong>,</p>\n\n  <p>Thank you for applying for the position of <strong>{{ $('If Candidate Qualifies').first().json.jobTitle }}</strong> at our company.</p>\n\n  <p>We have reviewed your resume and would like to invite you for a virtual interview to further discuss your application.</p>\n\n  <p>\n    📅 <strong>Interview Date</strong>: {{ $('Candidate Info Fetch').item.json.date }}<br>\n    🕘 <strong>Time Slot</strong>:{{ $('Candidate Info Fetch').item.json.startTime }} - {{ $('Candidate Info Fetch').item.json.endTime }}<br>\n    📍 <strong>Location</strong>: \n    <a href=\"{{ $json.conferenceData.entryPoints[0].uri }}\" target=\"_blank\" style=\"color: #1a73e8;\">\n      Google Meet Link\n    </a><br>\n  </p>\n\n  <p>We look forward to speaking with you!</p>\n\n  <p>\n    Best regards,<br>\n    <strong>HR Team</strong><br>\n    Ideofuzion\n  </p>\n</div>\n",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            1744,
            96
          ],
          "id": "f33a93a9-fd16-48bc-b7f8-1c2ac9f1ac3d",
          "name": "Email to Candidate",
          "webhookId": "d0ce039a-3a82-4b4c-8f54-65a6a007488f",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-5-mini",
              "mode": "list",
              "cachedResultName": "GPT-5-MINI"
            },
            "messages": {
              "values": [
                {
                  "content": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are an AI assistant for an automated CV and Job Application processing system.\\n\\nYour task is to read the provided RESUME TEXT and EMAIL SUBJECT, then perform three actions:\\n1. Return the name of the person from the resume.\\n2. Identify *all* skills from the resume and provide a list of common variations for each skill.\\n3. Identify the core job title from the EMAIL SUBJECT, ignore extra words like 'Application for', and provide a list of its common standardized variations.\\n\\nThe response must be in the exact JSON format specified below. Do not include any explanations or extra text.\\n\\nHere is the resume text:\\n\\\"\\\"\\\"\\n{{ $json.text }}\\n\\\"\\\"\\\"\\n\\nHere is the email subject:\\n\\\"\\\"\\\"\\n{{ $('Get Emails').item.json.subject }}\\n\\\"\\\"\\\"\\n\\nAnd here is the desired output format:\\n```json\\n{\\n  \\\"personName\\\": \\\"[Extracted Person's Name]\\\",\\n  \\\"skills\\\": {\\n    \\\"skill1\\\": [\\\"variation1\\\", \\\"variation2\\\"],\\n    \\\"skill2\\\": [\\\"variationA\\\", \\\"variationB\\\"]\\n  },\\n  \\\"jobTitleVariations\\\": [\\n    \\\"jobTitleVariation1\\\",\\n    \\\"jobTitleVariation2\\\"\\n  ]\\n}\\n```\\n\\nFor example, if the resume is for 'John Doe' and mentions 'JS', and the email subject is 'Applying for the Sr. Backend Dev role', your output must look like this:\\n```json\\n{\\n  \\\"personName\\\": \\\"John Doe\\\",\\n  \\\"skills\\\": {\\n    \\\"javascript\\\": [\\\"js\\\", \\\"javascript\\\", \\\"java script\\\", \\\"ecmascript\\\"],\\n    \\\"python\\\": [\\\"python\\\", \\\"py\\\", \\\"python3\\\"]\\n  },\\n  \\\"jobTitleVariations\\\": [\\n    \\\"Senior Backend Developer\\\",\\n    \\\"Sr. Backend Developer\\\",\\n    \\\"Senior Backend Dev\\\"\\n  ]\\n}\\n```\"\n        }\n      ]\n    }\n  ]\n}",
                  "role": "assistant"
                }
              ]
            },
            "simplify": false,
            "jsonOutput": true,
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            -1056,
            96
          ],
          "id": "2286bbfe-26d9-402b-a896-42595c8c457f",
          "name": "Processing Candidate info",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-4.1-mini",
              "mode": "list",
              "cachedResultName": "GPT-4.1-MINI"
            },
            "messages": {
              "values": [
                {
                  "content": "={{ JSON.stringify($json) }}",
                  "role": "assistant"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            224,
            0
          ],
          "id": "40f2de6d-e12a-4bfb-864b-b12ac8b145e7",
          "name": "Ai variations2",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "collection": "users",
            "options": {},
            "query": "={\n  \"email\": \"{{ $('Get Emails').first().json.to.value[0].address }}\"\n}\n"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -432,
            96
          ],
          "id": "3ce8ebe3-baca-4044-87f0-5a8f44ef1768",
          "name": "Find documents",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        }
      ],
      "connections": {
        "Loop Over Items3": {
          "main": [
            [
              {
                "node": "Get Emails",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Upload Cv",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger1": {
          "main": [
            [
              {
                "node": "Get Emails",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Emails": {
          "main": [
            [
              {
                "node": "Differentiating Between Mail msgs",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Differentiating Between Mail msgs": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload Cv": {
          "main": [
            [
              {
                "node": "Mark a message as read",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Mark a message as read": {
          "main": [
            [
              {
                "node": "Getting Essential Info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Getting Essential Info": {
          "main": [
            [
              {
                "node": "Download Cv",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download Cv": {
          "main": [
            [
              {
                "node": "Extracting Info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extracting Info": {
          "main": [
            [
              {
                "node": "Processing Candidate info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB JobPosted": {
          "main": [
            [
              {
                "node": "Prepare Gemini Body",
                "type": "main",
                "index": 0
              },
              {
                "node": "Matching Skills",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Matching Skills": {
          "main": [
            [
              {
                "node": "If Candidate Qualifies",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If Candidate Qualifies": {
          "main": [
            [
              {
                "node": "Get many events",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Delete Unqualified Cv",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB Candidate records": {
          "main": [
            [
              {
                "node": "Candidate Info Fetch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Candidate Info Fetch": {
          "main": [
            [
              {
                "node": "Schedule a meeting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule a meeting": {
          "main": [
            [
              {
                "node": "Email to Candidate",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set All info": {
          "main": [
            [
              {
                "node": "MongoDB insert All Records",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB insert All Records": {
          "main": [
            [
              {
                "node": "Move to Processed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Move to Processed": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Delete Unqualified Cv": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get many events": {
          "main": [
            [
              {
                "node": "Unavailable Slots",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Parse Ai Output": {
          "main": [
            [
              {
                "node": "Find documents",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Gemini Body": {
          "main": [
            [
              {
                "node": "Ai variations2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Unavailable Slots": {
          "main": [
            [
              {
                "node": "MongoDB Candidate records",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email to Candidate": {
          "main": [
            [
              {
                "node": "Set All info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Processing Candidate info": {
          "main": [
            [
              {
                "node": "Parse Ai Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find documents": {
          "main": [
            [
              {
                "node": "MongoDB JobPosted",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "fc81d394-4180-4bd5-9f0a-28f67a288657",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-08-25T07:28:51.788Z",
          "updatedAt": "2025-08-25T07:28:51.788Z",
          "role": "workflow:owner",
          "workflowId": "DZzPvMkxrdfsnp4Y",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "fc81d394-4180-4bd5-9f0a-28f67a288657",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:31:59.228Z",
      "updatedAt": "2025-08-25T11:31:59.228Z"
    },
    "status": "inactive",
    "createdAt": "2025-08-25T11:31:59.228Z",
    "updatedAt": "2025-08-25T11:31:59.228Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "QCxCZmYREkK0FODI",
    "name": "Meeting Bot & Analysis",
    "active": true,
    "workflowData": {
      "createdAt": "2025-08-19T13:07:45.463Z",
      "updatedAt": "2025-08-25T08:58:26.000Z",
      "id": "QCxCZmYREkK0FODI",
      "name": "Meeting Bot & Analysis",
      "active": true,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "jsCode": "// Get the single item from the input.\nconst item = $input.first();\n\n// Extract the start and end time strings from the JSON payload.\nconst startTimeStr = item.json['Interview Start'];\nconst endTimeStr = item.json['Interview End'];\nconst fullMeetingLink = item.json['Google Meet Id'];\n\n// Validate that the necessary date strings exist.\nif (!startTimeStr || !endTimeStr) {\n  return [{\n    json: {\n      meetingExists: false,\n      reason: \"Interview start or end time is missing from the input.\"\n    }\n  }];\n}\n\n// Get the current time.\nconst now = new Date();\n\n// Convert the interview end time string directly into a Date object.\n// JavaScript's Date constructor correctly parses ISO 8601 strings,\n// including those with timezone offsets like \"+05:00\".\nconst interviewEnd = new Date(endTimeStr);\n\n// A meeting is considered \"upcoming\" or \"in-progress\" if the current time\n// is before its scheduled end time. Both dates are compared in UTC internally.\nif (now.getTime() < interviewEnd.getTime()) {\n  // Extract the meeting code from the full Google Meet link.\n  const meetingCode = fullMeetingLink?.split('/').pop();\n\n  return [{\n    json: {\n      meetingExists: true,\n      meetingId: meetingCode\n    }\n  }];\n\n} else {\n  // If the current time is past the interview's end time, the meeting is over.\n  return [{\n    json: {\n      meetingExists: false\n    }\n  }];\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -80,
            -432
          ],
          "id": "fc310c85-9827-47b2-a694-e6f97bb879d4",
          "name": "Check Interview",
          "disabled": true
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.meetingExists }}",
                        "rightValue": "false",
                        "operator": {
                          "type": "boolean",
                          "operation": "false",
                          "singleValue": true
                        },
                        "id": "f3051e30-8a66-4062-ad28-7edef0df9f99"
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "dont allow"
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "afcd4992-51f8-4911-82b0-b5184a7b46ab",
                        "leftValue": "={{ $json.meetingExists }}",
                        "rightValue": "true",
                        "operator": {
                          "type": "boolean",
                          "operation": "true",
                          "singleValue": true
                        }
                      }
                    ],
                    "combinator": "and"
                  },
                  "renameOutput": true,
                  "outputKey": "allow"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.switch",
          "typeVersion": 3.2,
          "position": [
            64,
            -432
          ],
          "id": "704aa320-08d3-4732-9da7-5ae1ce6a429a",
          "name": "Switch",
          "disabled": true
        },
        {
          "parameters": {
            "jsCode": "// n8n Code Node - Combine transcript by speaker (Robust Version)\n\nconst inputData = $input.all();\nconst finalResult = [];\n\n// Loop through each item received by the node\nfor (const item of inputData) {\n  try {\n    const data = item.json;\n\n    // Check if a 'segments' array exists and is not empty\n    if (!data.segments || !Array.isArray(data.segments) || data.segments.length === 0) {\n      // If no segments, pass the item through without changes\n      finalResult.push(item);\n      continue; // Skip to the next item\n    }\n\n    // --- Processing starts here ---\n    const speakerTexts = {};\n\n    // 1. Group all text fragments by speaker\n    data.segments.forEach(segment => {\n      // Use 'Unknown Speaker' for any segment that has no speaker assigned\n      const speaker = segment.speaker || 'Unknown Speaker';\n      \n      // Initialize an array for a new speaker\n      if (!speakerTexts[speaker]) {\n        speakerTexts[speaker] = [];\n      }\n      \n      // Add the text to the correct speaker's array\n      if (segment.text && typeof segment.text === 'string') {\n        speakerTexts[speaker].push(segment.text.trim());\n      }\n    });\n\n    // 2. Combine the text for each speaker into a single string\n    const speakerTranscripts = [];\n    for (const [speaker, texts] of Object.entries(speakerTexts)) {\n      speakerTranscripts.push({\n        speaker: speaker === 'Unknown Speaker' ? null : speaker,\n        text: texts.join(' ')\n      });\n    }\n\n    // 3. Build the new, final JSON object for the output\n    // This structure explicitly OMITS the old 'segments' field\n    const newJson = {\n      id: data.id,\n      platform: data.platform,\n      native_meeting_id: data.native_meeting_id,\n      constructed_meeting_url: data.constructed_meeting_url,\n      status: data.status,\n      start_time: data.start_time,\n      end_time: data.end_time,\n      speaker_transcripts: speakerTranscripts // Add the new combined transcripts\n    };\n\n    finalResult.push({ json: newJson });\n\n  } catch (error) {\n    // If an error occurs, return the error information\n    // This helps you see if the input data format is wrong\n    return [{ json: { error: error.message, item: item } }];\n  }\n}\n\n// Return the final array of processed items\nreturn finalResult;"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1856,
            272
          ],
          "id": "8d5661d1-d314-4961-89d1-0a82cef628ec",
          "name": "Format Transcripts 1"
        },
        {
          "parameters": {
            "jsCode": "// n8n Code Node - Combine transcript by speaker (Robust Version)\n\nconst inputData = $input.all();\nconst finalResult = [];\n\n// Loop through each item received by the node\nfor (const item of inputData) {\n  try {\n    const data = item.json;\n\n    // Check if a 'segments' array exists and is not empty\n    if (!data.segments || !Array.isArray(data.segments) || data.segments.length === 0) {\n      // If no segments, pass the item through without changes\n      finalResult.push(item);\n      continue; // Skip to the next item\n    }\n\n    // --- Processing starts here ---\n    const speakerTexts = {};\n\n    // 1. Group all text fragments by speaker\n    data.segments.forEach(segment => {\n      // Use 'Unknown Speaker' for any segment that has no speaker assigned\n      const speaker = segment.speaker || 'Unknown Speaker';\n      \n      // Initialize an array for a new speaker\n      if (!speakerTexts[speaker]) {\n        speakerTexts[speaker] = [];\n      }\n      \n      // Add the text to the correct speaker's array\n      if (segment.text && typeof segment.text === 'string') {\n        speakerTexts[speaker].push(segment.text.trim());\n      }\n    });\n\n    // 2. Combine the text for each speaker into a single string\n    const speakerTranscripts = [];\n    for (const [speaker, texts] of Object.entries(speakerTexts)) {\n      speakerTranscripts.push({\n        speaker: speaker === 'Unknown Speaker' ? null : speaker,\n        text: texts.join(' ')\n      });\n    }\n\n    // 3. Build the new, final JSON object for the output\n    // This structure explicitly OMITS the old 'segments' field\n    const newJson = {\n      id: data.id,\n      platform: data.platform,\n      native_meeting_id: data.native_meeting_id,\n      constructed_meeting_url: data.constructed_meeting_url,\n      status: data.status,\n      start_time: data.start_time,\n      end_time: data.end_time,\n      speaker_transcripts: speakerTranscripts // Add the new combined transcripts\n    };\n\n    finalResult.push({ json: newJson });\n\n  } catch (error) {\n    // If an error occurs, return the error information\n    // This helps you see if the input data format is wrong\n    return [{ json: { error: error.message, item: item } }];\n  }\n}\n\n// Return the final array of processed items\nreturn finalResult;"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1856,
            592
          ],
          "id": "77b77873-99a5-4f5c-83e6-9c29be8041c3",
          "name": "Format Transcripts 2"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "e07ab440-cdd9-4240-9b55-bdb340572e20",
                  "name": "Speaker1",
                  "value": "={{ $json.speaker_transcripts[0].text }}",
                  "type": "string"
                },
                {
                  "id": "78273a45-859a-48a5-8919-31d4544c2efe",
                  "name": "Speaker2",
                  "value": "={{ $json.speaker_transcripts[1].text }}",
                  "type": "string"
                },
                {
                  "id": "ed330c6a-bd4c-45da-9f2e-d5d274220398",
                  "name": "Speaker3",
                  "value": "={{ $json.speaker_transcripts[2].text }}",
                  "type": "string"
                },
                {
                  "id": "8bc3e8b2-baa5-461a-bb27-b59ee282c1fa",
                  "name": "Meet_id",
                  "value": "={{ $json.native_meeting_id }}",
                  "type": "string"
                },
                {
                  "id": "20d3a290-cfb0-43c8-87ee-01ce1804b562",
                  "name": "userId",
                  "value": "={{ $('Webhook').item.json.body.userId }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2000,
            272
          ],
          "id": "b9f97a3f-8748-4018-83b7-b116aa5f4428",
          "name": "Set Fields 1"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "75ab4453-b1bf-4e96-8c4f-452d0f85d22c",
                  "name": "Speaker1",
                  "value": "={{ $json.speaker_transcripts[0].text }}",
                  "type": "string"
                },
                {
                  "id": "d4ea91ce-e216-4e12-9f47-f80cfaaf24b8",
                  "name": "Speaker2",
                  "value": "={{ $json.speaker_transcripts[1].text }}",
                  "type": "string"
                },
                {
                  "id": "0f0267de-d4c2-431f-8d0f-bbabe3a41690",
                  "name": "Speaker3",
                  "value": "={{ $json.speaker_transcripts[2].text }}",
                  "type": "string"
                },
                {
                  "id": "fe95cf23-e6ad-4146-b525-54d96d074243",
                  "name": "Meet_id",
                  "value": "={{ $json.native_meeting_id }}",
                  "type": "string"
                },
                {
                  "id": "783bd85c-2df4-4de6-8abe-befe2e419b82",
                  "name": "userId",
                  "value": "={{ $('Webhook').item.json.body.userId }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2000,
            592
          ],
          "id": "ec146f71-3e65-4b90-ab6d-eff19ffa5852",
          "name": "Set Fields 2"
        },
        {
          "parameters": {
            "operation": "insert",
            "collection": "transcripts",
            "fields": "Speaker1, Speaker2, Speaker3,Meet_id, userId",
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            2144,
            272
          ],
          "id": "5dbc5cb1-b0a2-4638-8bc2-a4095d012085",
          "name": "Create Transcript",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "update",
            "collection": "transcripts",
            "updateKey": "Meet_id",
            "fields": "Speaker1, Speaker2, Speaker3,userId",
            "upsert": true,
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            2352,
            592
          ],
          "id": "4b919e23-7703-43e3-a59a-e478041a11e1",
          "name": "Update Transcript",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=AIzaSyB09u5cRFaTUOfWpCDt-GHX_4A9ivJYf0I",
            "sendBody": true,
            "contentType": "raw",
            "rawContentType": "json",
            "body": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Summarize the candidate’s latest response in 3–4 short bullet points focusing on key facts, experiences, and attitudes.\\n3. Suggest 2–3 follow-up questions that the employer can ask next. These should be insightful, specific, and encourage elaboration.\\n4. If the response is unclear, include a clarifying question.\\n\\nReturn only valid JSON in this format:\\n{\\n  \\\"summary\\\": [\\\"point 1\\\", \\\"point 2\\\", \\\"point 3\\\"],\\n  \\\"suggested_questions\\\": [\\\"question 1\\\", \\\"question 2\\\", \\\"question 3\\\"]\\n}\"\n        },\n        {\n          \"text\": \"{{ $json.Speaker1 }}:{{ $('Format Transcripts 1').item.json.speaker_transcripts[1] }} \\n{{ $json.Speaker2 }}:{{ $('Format Transcripts 1').item.json.speaker_transcripts[1] }} \"\n        }\n      ]\n    }\n  ]\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1744,
            -528
          ],
          "id": "855ae66e-4b8f-4282-827a-1e2c8a745609",
          "name": "Summary & Questions"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=AIzaSyB09u5cRFaTUOfWpCDt-GHX_4A9ivJYf0I",
            "sendBody": true,
            "contentType": "raw",
            "rawContentType": "json",
            "body": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are an AI assistant helping an employer during an interview.\\n\\nThe following is the conversation so far, along with a summary of what has already been discussed:\\n\\nContext summary of previous conversation:\\n\\\"\\\"\\\"\\n{{ $json.latest_summary }}\\n\\\"\\\"\\\"\\n\\nAnalyze the most recent transcripts:\\n\\\"\\\"\\\"\\n{{ $('Set Fields 2').item.json.Speaker1 }}\\n{{ $('Set Fields 2').item.json.Speaker2 }}\\n{{ $('Set Fields 2').item.json.Speaker3 }}\\n\\\"\\\"\\\"\\n\\nTasks:\\n1. Consider both the new transcripts and the provided context summary to fully understand the candidate’s communication and responses.\\n2. Summarize the candidate’s latest response in 3–4 short bullet points focusing on key facts, experiences, and attitudes.\\n3. Suggest 2–3 follow-up questions that the employer can ask next. These should be insightful, specific, and encourage elaboration.\\n4. If the response is unclear, include a clarifying question.\\n\\nReturn only valid JSON in this format:\\n{\\n  \\\"summary\\\": [\\\"point 1\\\", \\\"point 2\\\", \\\"point 3\\\"],\\n  \\\"suggested_questions\\\": [\\\"question 1\\\", \\\"question 2\\\", \\\"question 3\\\"]\\n}\"\n        }\n      ]\n    }\n  ]\n}\n",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            2544,
            1152
          ],
          "id": "10d7d346-3f00-485b-9d83-472c42e15d06",
          "name": "Summary & Questions 2",
          "retryOnFail": true,
          "waitBetweenTries": 5000,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "jsCode": "// Get all items from the previous node.\nconst items = $input.all();\nconst finalResult = [];\n\n// Loop through each item to process it individually.\nfor (const item of items) {\n  try {\n    const inputJson = item.json;\n\n    // --- Find the correct starting object (handles both array/object inputs) ---\n    let dataObject;\n    if (Array.isArray(inputJson) && inputJson.length > 0) {\n      dataObject = inputJson[0];\n    } else {\n      dataObject = inputJson;\n    }\n\n    // --- FIXED: Extract the nested data from the new path ---\n    // The raw JSON string is now located in `message.content`.\n    const textResponse = dataObject?.message?.content;\n\n    // If the expected data isn't in this item, pass the item through unchanged.\n    if (!textResponse) {\n      finalResult.push(item);\n      continue; // Move to the next item in the loop.\n    }\n\n    // --- FIXED: Parse the JSON string directly ---\n    // The new output doesn't include ```json markers, so we can parse directly.\n    const parsedData = JSON.parse(textResponse);\n\n    // --- Combine the arrays into single strings ---\n    // This logic remains the same, using a double newline for readability.\n    const summaryText = parsedData.summary?.join('\\n\\n') || '';\n    const questionsText = parsedData.suggested_questions?.join('\\n\\n') || '';\n\n    // --- Build the new output object ---\n    // 1. Create a copy of all original data fields.\n    const newJson = { ...dataObject };\n\n    // 2. FIXED: Remove the original 'message' field to avoid duplicate data.\n    delete newJson.message;\n\n    // 3. Add the new fields with the combined text.\n    newJson.summary_text = summaryText;\n    newJson.suggested_questions_text = questionsText;\n    \n    // Add the fully transformed item to our results.\n    finalResult.push({ json: newJson });\n\n  } catch (error) {\n    // If an error occurs, create an error object for easy debugging.\n    finalResult.push({\n      json: {\n        error: true,\n        message: `Processing failed: ${error.message}`,\n        originalItem: item.json\n      }\n    });\n  }\n}\n\n// Return the final array of all processed items.\nreturn finalResult;"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            2832,
            272
          ],
          "id": "fc6b5c9b-de18-4e88-ac1c-5f49674c832b",
          "name": "Formatting"
        },
        {
          "parameters": {
            "jsCode": "// Get all items from the previous node.\nconst items = $input.all();\nconst finalResult = [];\n\n// Loop through each item to process it individually.\nfor (const item of items) {\n  try {\n    const inputJson = item.json;\n\n    // --- Find the correct starting object (handles both array/object inputs) ---\n    let dataObject;\n    if (Array.isArray(inputJson) && inputJson.length > 0) {\n      dataObject = inputJson[0];\n    } else {\n      dataObject = inputJson;\n    }\n\n    // --- MODIFIED: Extract the nested data from the new path ---\n    // The raw JSON string is now located in `message.content`.\n    const textResponse = dataObject?.message?.content;\n\n    // If the expected data isn't in this item, pass the item through unchanged.\n    if (!textResponse) {\n      finalResult.push(item);\n      continue; // Move to the next item in the loop.\n    }\n\n    // --- MODIFIED: Parse the JSON string directly ---\n    // The new LLM output doesn't include ```json markers, so we can parse directly.\n    const parsedData = JSON.parse(textResponse);\n\n    // --- Combine the arrays into single strings ---\n    // This logic remains the same, using a double newline for readability.\n    const summaryText = parsedData.summary?.join('\\n\\n') || '';\n    const questionsText = parsedData.suggested_questions?.join('\\n\\n') || '';\n\n    // --- Build the new output object ---\n    // 1. Create a copy of all original data fields.\n    const newJson = { ...dataObject };\n\n    // 2. MODIFIED: Remove the original 'message' field to avoid duplicate data.\n    delete newJson.message;\n\n    // 3. Add the new fields with the combined text.\n    newJson.summary_text = summaryText;\n    newJson.suggested_questions_text = questionsText;\n    \n    // Add the fully transformed item to our results.\n    finalResult.push({ json: newJson });\n\n  } catch (error) {\n    // If an error occurs, create an error object for easy debugging.\n    finalResult.push({\n      json: {\n        error: true,\n        message: `Processing failed: ${error.message}`,\n        originalItem: item.json\n      }\n    });\n  }\n}\n\n// Return the final array of all processed items.\nreturn finalResult;"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            3056,
            592
          ],
          "id": "b687a49d-f049-47fa-96cf-558a28b62a60",
          "name": "Formatting 2"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "32c135e7-c678-432c-add6-40ee539cb27a",
                  "name": "Summary",
                  "value": "={{ $json.summary_text }}",
                  "type": "string"
                },
                {
                  "id": "f4b32146-892a-4549-b232-a5476c38f027",
                  "name": "Suggested_Questions",
                  "value": "={{ $json.suggested_questions_text }}",
                  "type": "string"
                },
                {
                  "id": "dd4d30a7-ae24-41f2-b1e9-79930081ee2d",
                  "name": "Meet_id",
                  "value": "={{ $('Get Transcripts From Meeting').item.json.native_meeting_id }}",
                  "type": "string"
                },
                {
                  "id": "b7437b9d-9749-4749-b2e5-aebf9c674c63",
                  "name": "userId",
                  "value": "={{ $('Webhook').item.json.body.userId }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2992,
            272
          ],
          "id": "820d9ef6-6e3e-4d66-a32f-a9c586474a09",
          "name": "Set Fields 3"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "32c135e7-c678-432c-add6-40ee539cb27a",
                  "name": "Summary",
                  "value": "={{ $json.summary_text }}",
                  "type": "string"
                },
                {
                  "id": "f4b32146-892a-4549-b232-a5476c38f027",
                  "name": "Suggested_Questions",
                  "value": "={{ $json.suggested_questions_text }}",
                  "type": "string"
                },
                {
                  "id": "dd4d30a7-ae24-41f2-b1e9-79930081ee2d",
                  "name": "Meet_id",
                  "value": "={{ $('Format Transcripts 2').item.json.native_meeting_id }}",
                  "type": "string"
                },
                {
                  "id": "b7967049-a54f-4da8-a799-02381bd078b5",
                  "name": "userId",
                  "value": "={{ $('Webhook').item.json.body.userId }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            3200,
            592
          ],
          "id": "535ae5b8-7315-48c2-818a-fa4c0f5bf78b",
          "name": "Set Fields 4"
        },
        {
          "parameters": {
            "operation": "update",
            "collection": "transcripts",
            "updateKey": "Meet_id",
            "fields": "Summary, Suggested_Questions,userId",
            "upsert": true,
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            3408,
            432
          ],
          "id": "70b975d1-cf58-4329-bb30-68f2b36423c1",
          "name": "Updating Summary & Questions",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "method": "POST",
            "url": " https://gateway.dev.vexa.ai/bots",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "CxtbOw7GCYwmO4mGKVJ8UsbmszwAfzdyzaQHgU3c"
                }
              ]
            },
            "sendBody": true,
            "bodyParameters": {
              "parameters": [
                {
                  "name": "platform",
                  "value": "google_meet"
                },
                {
                  "name": "native_meeting_id",
                  "value": "={{ $json.meetId }}"
                },
                {
                  "name": "language",
                  "value": "en"
                },
                {
                  "name": "bot_name",
                  "value": "MyMeetingBot"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1136,
            752
          ],
          "id": "a2273eaf-d41d-4cc2-aa51-7c51c348beb3",
          "name": "Send Bot to Meeting",
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "88867ef1-82e3-45c9-afb9-1c3ae607dc6a",
                  "leftValue": "={{ $json.segments }}",
                  "rightValue": "",
                  "operator": {
                    "type": "array",
                    "operation": "empty",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            1616,
            432
          ],
          "id": "c59634ff-52ad-4901-9789-7917b4bb4abf",
          "name": "Meeting ID Exists?"
        },
        {
          "parameters": {
            "collection": "candidates",
            "options": {
              "projection": "{\n\n  \"Interview End\":1,\n  \"Google Meet Id\":1\n  \n}"
            },
            "query": "={\n  \"Google Meet Id\": {\n    \"$regex\": \"{{ $json.Meet_id }}\"\n  }\n} "
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            3568,
            432
          ],
          "id": "4667b077-8039-406c-97f2-00ea49abedf8",
          "name": "Get Meeting Time",
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// Get the items from the previous node.\nconst items = $input.all();\n\n// Loop through each item to process it.\nfor (const item of items) {\n  // Get the \"Interview Time\" string from the item.\n  const interviewTimeStr = item.json['Interview Time'];\n  // Get the \"Google Meet Id\" string from the item.\n  const meetIdLink = item.json['Google Meet Id'];\n\n  // Check if the input is a string and not a number.\n  if (typeof interviewTimeStr === 'string' && interviewTimeStr.includes(' - ')) {\n    // Split the string by \" - \" to get the start and end times.\n    const timeParts = interviewTimeStr.split(' - ');\n    const endTimeStr = timeParts[1].trim();\n\n    // Parse the end time string into hours and minutes (local time).\n    const [time, period] = endTimeStr.split(' ');\n    let [hours, minutes] = time.split(':').map(Number);\n    if (period === 'PM' && hours !== 12) {\n      hours += 12;\n    }\n    if (period === 'AM' && hours === 12) {\n      hours = 0;\n    }\n\n    // Get today's date in UTC.\n    const nowUTC = new Date();\n    const yearUTC = nowUTC.getUTCFullYear();\n    const monthUTC = nowUTC.getUTCMonth();\n    const dayUTC = nowUTC.getUTCDate();\n    \n    // IMPORTANT: Convert the local time to UTC by subtracting the offset.\n    // PKT is UTC+5, so we subtract 5 hours.\n    const localTimezoneOffsetHours = 5;\n    const utcHours = hours - localTimezoneOffsetHours;\n\n    // Create the Date object using Date.UTC(), which is timezone-agnostic.\n    const endTime = new Date(Date.UTC(yearUTC, monthUTC, dayUTC, utcHours, minutes, 0));\n\n    // Store the extracted end time.\n    item.json.interviewEndTime = endTime;\n  }\n\n  // Add the meeting code to the output if the link exists.\n  if (meetIdLink) {\n    const meetCode = meetIdLink.split('/').pop();\n    item.json.meetingId = meetCode;\n  }\n}\n\n// Return the updated items.\nreturn items;"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            3728,
            432
          ],
          "id": "eefc87d4-a181-4629-ac19-69c36edfab9d",
          "name": "Extract Endtime"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "521e2054-cd98-4a35-ad8c-45ae7dd12930",
                  "leftValue": "={{$now }}",
                  "rightValue": "={{ new Date($json['Interview End']) }}",
                  "operator": {
                    "type": "dateTime",
                    "operation": "after"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            3888,
            432
          ],
          "id": "b3abdc48-61b9-42a8-991c-f75b92ef98c0",
          "name": "Is Meeting Time Over?",
          "alwaysOutputData": false,
          "executeOnce": false
        },
        {
          "parameters": {
            "method": "DELETE",
            "url": "=http://api.vexa.ai/bots/google_meet/{{ $('meet Id get').item.json.meetId }}",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "WCAJ5dMpqEsFP8yi8VBRAEHTtFLx0SWIiFCgecLr"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            5712,
            48
          ],
          "id": "1a5b76f1-d761-4f3b-abf5-5402ebdf56a3",
          "name": "Stop Bot in Meeting"
        },
        {
          "parameters": {
            "url": "=\nhttps://gateway.dev.vexa.ai/transcripts/google_meet/{{ $('meet Id get').item.json.meetId }}",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "CxtbOw7GCYwmO4mGKVJ8UsbmszwAfzdyzaQHgU3c"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            1456,
            432
          ],
          "id": "8c215d6e-e8d4-4ef1-a5b4-be41556f5914",
          "name": "Get Transcripts From Meeting",
          "alwaysOutputData": true,
          "retryOnFail": false,
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            256,
            -544
          ],
          "id": "9909c0a7-b3d8-4b30-a4b1-13dcd073cf9f",
          "name": "Meeting Doesn't Exist",
          "disabled": true
        },
        {
          "parameters": {
            "url": "=\nhttps://gateway.dev.vexa.ai/transcripts/google_meet/{{ $('meet Id get').item.json.meetId }}",
            "sendHeaders": true,
            "headerParameters": {
              "parameters": [
                {
                  "name": "X-API-Key",
                  "value": "CxtbOw7GCYwmO4mGKVJ8UsbmszwAfzdyzaQHgU3c"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            4096,
            640
          ],
          "id": "f8de5623-32c2-4818-af6c-75523a0eb258",
          "name": "Get Transcripts From Meeting2",
          "alwaysOutputData": true
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.noOp",
          "typeVersion": 1,
          "position": [
            4816,
            384
          ],
          "id": "105e6e8c-a3dc-4d17-a169-f1acfa8f1802",
          "name": "No Operation, do nothing"
        },
        {
          "parameters": {
            "method": "POST",
            "url": "https://generativelanguage.googleapis.com/v1/models/gemini-2.5-flash:generateContent?key=AIzaSyCnZYGpXJg3Rdww2VozR_pVdhAtvS3ISkI",
            "sendBody": true,
            "contentType": "raw",
            "rawContentType": "json",
            "body": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are acting as an analyst of the Interview Process, use professional insight and critique in the procedure, only examine the interviewee not the interviewer: Perform Psychometric, Technical and Behavioural Analysis and make headings for each one.\\n2.The analysis should be insightful, specific, and detailed but not too long, max 5 lines for each.\\n3. If the candidate is unclear, include a critique of that.\\n4. Also add a 'Recommended for Hire' heading, the answer should only be YES, NO and MAYBE.\\n5. A Meet-id heading should be there that has{{ $json.Meet_id }} as it is .\\n\\nReturn only a valid JSON object in this format:\\n{\\n  \\\"Psychometric Analysis\\\": \\\"\\\",\\n  \\\"Technical Analysis\\\": \\\"\\\",\\n  \\\"Behavioural Analysis\\\": \\\"\\\",\\n  \\\"Meet_id\\\": \\\"\\\",\\n  \\\"Recommended for Hire\\\": \\\"\\\"\\n}\"\n        },\n        {\n          \"text\": \"Speaker1:{{ $json.Speaker1 }} \\nSpeaker2:{{ $json.Speaker2 }} \\nSpeaker3:{{ $json.Speaker3 }} \"\n        }\n      ]\n    }\n  ]\n}",
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            3760,
            -1648
          ],
          "id": "8348dcb2-6fde-4a82-af03-8a3563e50fc5",
          "name": "Analyzing Transcript"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "c2f81334-23a2-40d7-9ca4-e7b34ded91c8",
                  "name": "Psychometric Analysis",
                  "value": "={{ $json['Psychometric Analysis'] }}",
                  "type": "string"
                },
                {
                  "id": "1a27eb15-e702-4413-8cd8-adfdf632b50f",
                  "name": "Technical Analysis",
                  "value": "={{ $json['Technical Analysis'] }}",
                  "type": "string"
                },
                {
                  "id": "441e211a-f82b-4b90-b9c5-7b51e187b848",
                  "name": "Behavioural Analysis",
                  "value": "={{ $json['Behavioural Analysis'] }}",
                  "type": "string"
                },
                {
                  "id": "99525ae3-1c93-4f52-ae4b-7513e7e6f8d0",
                  "name": "Recommended for Hire",
                  "value": "={{ $json['Recommended for Hire'] }}",
                  "type": "string"
                },
                {
                  "id": "68e3c47c-b7bd-498e-9d12-5d083b502f1f",
                  "name": "Meet_id",
                  "value": "={{ $('meet Id get').item.json.meetId }}",
                  "type": "string"
                },
                {
                  "id": "6ba7b7f8-2a20-4744-bf19-f4f27a06b4a1",
                  "name": "userId",
                  "value": "={{ $('Webhook').item.json.body.userId }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            5312,
            48
          ],
          "id": "dfae6698-f19b-4c27-be27-69093e1b26b3",
          "name": "Edit Fields"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "d1230545-2f9a-4782-91c6-01180beddc89",
                  "name": "Meet_ID",
                  "value": "={{ $json.meetingId }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            4064,
            272
          ],
          "id": "10b5c92e-a960-49ab-8adf-1364a5d81d96",
          "name": "Edit Fields1"
        },
        {
          "parameters": {
            "rules": {
              "values": [
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "leftValue": "={{ $json.Meet_id }}",
                        "rightValue": "null",
                        "operator": {
                          "type": "string",
                          "operation": "notEquals"
                        },
                        "id": "34f2d329-8be5-4a18-afdc-765530300c45"
                      }
                    ],
                    "combinator": "and"
                  }
                },
                {
                  "conditions": {
                    "options": {
                      "caseSensitive": true,
                      "leftValue": "",
                      "typeValidation": "strict",
                      "version": 2
                    },
                    "conditions": [
                      {
                        "id": "6141e2b4-2142-4cae-9fb7-d6f81e67537b",
                        "leftValue": "={{ $json.Meet_id }}",
                        "rightValue": "null",
                        "operator": {
                          "type": "string",
                          "operation": "equals",
                          "name": "filter.operator.equals"
                        }
                      }
                    ],
                    "combinator": "and"
                  }
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.switch",
          "typeVersion": 3.2,
          "position": [
            4416,
            272
          ],
          "id": "96db270c-3c0d-4225-adf8-f84c12721de1",
          "name": "Switch2"
        },
        {
          "parameters": {
            "operation": "insert",
            "collection": "analysis",
            "fields": "Psychometric Analysis, Technical Analysis, Behavioural Analysis, Recommended for Hire, Meet_id,userId",
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            5520,
            48
          ],
          "id": "38bf1ac7-cd91-4905-9935-13d41db4351c",
          "name": "MongoDB3",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "const items = $input.all();\nconst finalResult = [];\n\n// Loop through each item to process it safely.\nfor (const item of items) {\n  try {\n    const inputJson = item.json;\n\n    // --- Find the correct starting object (handles array/object inputs) ---\n    let dataObject;\n    if (Array.isArray(inputJson) && inputJson.length > 0) {\n      dataObject = inputJson[0];\n    } else {\n      dataObject = inputJson;\n    }\n\n    // --- FIXED: Access the nested string from the correct path ---\n    const rawDataString = dataObject?.message?.content;\n\n    // If the data isn't in this item, pass the item through unchanged.\n    if (!rawDataString) {\n        finalResult.push(item);\n        continue;\n    }\n\n    // --- FIXED: Parse the cleaned string directly ---\n    // The new format does not have ```json markers, so no replacement is needed.\n    const parsedData = JSON.parse(rawDataString);\n\n    // --- Create the final object with the desired fields ---\n    // This part of your logic was correct.\n    const formattedResponse = {\n      \"Psychometric Analysis\": parsedData[\"Psychometric Analysis\"],\n      \"Technical Analysis\": parsedData[\"Technical Analysis\"],\n      \"Behavioural Analysis\": parsedData[\"Behavioural Analysis\"],\n      \"Meet_id\": parsedData[\"Meet_id\"],\n      \"Recommended for Hire\": parsedData[\"Recommended for Hire\"]\n    };\n\n    // Add the fully transformed item to our results.\n    finalResult.push({ json: formattedResponse });\n\n  } catch (error) {\n    // If an error occurs, create an error object for easy debugging.\n    finalResult.push({\n      json: {\n        error: true,\n        message: `Processing failed: ${error.message}`,\n        originalItem: item.json\n      }\n    });\n  }\n}\n\n// Return the final array of all processed items.\nreturn finalResult;"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            5136,
            48
          ],
          "id": "853454a4-165b-4a21-8367-10160232656b",
          "name": "Formatting2"
        },
        {
          "parameters": {
            "amount": 15
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            4352,
            688
          ],
          "id": "18fb052d-58d8-4381-9cff-1013bb6aa0fa",
          "name": "Wait3",
          "webhookId": "aaa938be-a4a6-47c5-9795-0230f15db7b6"
        },
        {
          "parameters": {
            "operation": "aggregate",
            "collection": "candidates",
            "query": "=[\n  {\n    \"$match\": {\n      \"userId\": \"{{ $('Webhook').item.json.body.userId }}\",\n      \"$expr\": {\n        \"$gt\": [\n          { \"$toDate\": \"$Interview End\" },\n          \"$$NOW\"\n        ]\n      }\n    }\n  },\n  {\n    \"$sort\": {\n      \"Interview Start\": 1\n    }\n  },\n  {\n    \"$limit\": 1\n  },\n  {\n    \"$project\": {\n      \"Interview Start\": 1,\n      \"Interview End\": 1,\n      \"Google Meet Id\": 1,\n      \"_id\": 0\n    }\n  }\n]"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -336,
            -528
          ],
          "id": "15a07cc2-f8ed-4a60-8a56-e7577fba7708",
          "name": "Get Candidate Details",
          "alwaysOutputData": false,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          },
          "disabled": true
        },
        {
          "parameters": {
            "amount": 10
          },
          "type": "n8n-nodes-base.wait",
          "typeVersion": 1.1,
          "position": [
            1296,
            432
          ],
          "id": "8f0d1faf-2343-496b-abd9-6dd040150230",
          "name": "Wait for Admission",
          "webhookId": "8bcee772-d685-426a-a87c-16707b5fd796"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "88867ef1-82e3-45c9-afb9-1c3ae607dc6a",
                  "leftValue": "={{ $json.Speaker1 }}",
                  "rightValue": "[null]",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                },
                {
                  "id": "edbd53c1-44d8-43c5-8227-e4ba3c075a47",
                  "leftValue": "={{ $json.Speaker2 }}",
                  "rightValue": "[null]",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                },
                {
                  "id": "8bf7135f-ce3a-45f4-b358-6fffdfeb8591",
                  "leftValue": "={{ $json.Speaker3 }}",
                  "rightValue": "[null]",
                  "operator": {
                    "type": "string",
                    "operation": "equals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            2528,
            480
          ],
          "id": "e098d636-5c9a-4a76-9c35-a220926db880",
          "name": "Is Anyone Speaking?"
        },
        {
          "parameters": {
            "collection": "transcripts",
            "options": {
              "projection": "{\n  \"Speaker1\": 1,\n  \"Speaker2\": 1,\n  \"Speaker3\": 1,\n  \"Meet_id\": 1\n}"
            },
            "query": "={\n  \"Meet_id\": \"{{$node[\"Edit Fields1\"].json[\"Meet_ID\"]}}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            4240,
            272
          ],
          "id": "bcc4255a-cb25-40cd-bc67-66655b150975",
          "name": "Find Transcripts By Meet ID",
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "meetbot-ideofuzion",
            "options": {}
          },
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 2,
          "position": [
            256,
            544
          ],
          "id": "6f709c73-77bc-4c89-bd76-c3db5cf98b4d",
          "name": "Webhook",
          "webhookId": "f04e8b6a-39c9-4654-ac7b-0aee4b6bd4fb"
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-5-nano",
              "mode": "list",
              "cachedResultName": "GPT-5-NANO"
            },
            "messages": {
              "values": [
                {
                  "content": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are an AI assistant helping an employer during an interview.\\n\\nThe following is the conversation so far, along with a summary of what has already been discussed:\\n\\nContext summary of previous conversation:\\n\\\"\\\"\\\"\\n{{ $json.latest_summary }}\\n\\\"\\\"\\\"\\n\\nAnalyze the most recent transcripts:\\n\\\"\\\"\\\"\\n{{ $('Set Fields 2').item.json.Speaker1 }}\\n{{ $('Set Fields 2').item.json.Speaker2 }}\\n{{ $('Set Fields 2').item.json.Speaker3 }}\\n\\\"\\\"\\\"\\n\\nTasks:\\n1. Consider both the new transcripts and the provided context summary to fully understand the candidate’s communication and responses.\\n2. Summarize the candidate’s latest response in 3–4 short bullet points focusing on key facts, experiences, and attitudes.\\n3. Suggest 2–3 follow-up questions that the employer can ask next. These should be insightful, specific, and encourage elaboration.\\n4. If the response is unclear, include a clarifying question.\\n\\nReturn only valid JSON in this format:\\n{\\n  \\\"summary\\\": [\\\"point 1\\\", \\\"point 2\\\", \\\"point 3\\\"],\\n  \\\"suggested_questions\\\": [\\\"question 1\\\", \\\"question 2\\\", \\\"question 3\\\"]\\n}\"\n        }\n      ]\n    }\n  ]\n}\n",
                  "role": "assistant"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            2768,
            624
          ],
          "id": "92cf4cb9-364d-4464-b05a-9fabc6b2a945",
          "name": "Summary and Questions",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-5-nano",
              "mode": "list",
              "cachedResultName": "GPT-5-NANO"
            },
            "messages": {
              "values": [
                {
                  "content": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"Summarize the candidate’s latest response in 3–4 short bullet points focusing on key facts, experiences, and attitudes.\\n3. Suggest 2–3 follow-up questions that the employer can ask next. These should be insightful, specific, and encourage elaboration.\\n4. If the response is unclear, include a clarifying question.\\n\\nReturn only valid JSON in this format:\\n{\\n  \\\"summary\\\": [\\\"point 1\\\", \\\"point 2\\\", \\\"point 3\\\"],\\n  \\\"suggested_questions\\\": [\\\"question 1\\\", \\\"question 2\\\", \\\"question 3\\\"]\\n}\"\n        },\n        {\n          \"text\": \"{{ $json.Speaker1 }}:{{ $('Format Transcripts 1').item.json.speaker_transcripts[1] }} \\n{{ $json.Speaker2 }}:{{ $('Format Transcripts 1').item.json.speaker_transcripts[1] }} \"\n        }\n      ]\n    }\n  ]\n}",
                  "role": "assistant"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            2352,
            160
          ],
          "id": "4c317f32-64fe-4930-a443-d9102fee08ec",
          "name": "Summary and Questions1",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-5-nano",
              "mode": "list",
              "cachedResultName": "GPT-5-NANO"
            },
            "messages": {
              "values": [
                {
                  "content": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are acting as an analyst of the Interview Process, use professional insight and critique in the procedure, only examine the interviewee not the interviewer: Perform Psychometric, Technical and Behavioural Analysis and make headings for each one.\\n2.The analysis should be insightful, specific, and detailed but not too long, max 5 lines for each.\\n3. If the candidate is unclear, include a critique of that.\\n4. Also add a 'Recommended for Hire' heading, the answer should only be YES, NO and MAYBE.\\n5. A Meet-id heading should be there that has{{ $json.Meet_id }} as it is .\\n\\nReturn only a valid JSON object in this format:\\n{\\n  \\\"Psychometric Analysis\\\": \\\"\\\",\\n  \\\"Technical Analysis\\\": \\\"\\\",\\n  \\\"Behavioural Analysis\\\": \\\"\\\",\\n  \\\"Meet_id\\\": \\\"\\\",\\n  \\\"Recommended for Hire\\\": \\\"\\\"\\n}\"\n        },\n        {\n          \"text\": \"Speaker1:{{ $json.Speaker1 }} \\nSpeaker2:{{ $json.Speaker2 }} \\nSpeaker3:{{ $json.Speaker3 }} \"\n        }\n      ]\n    }\n  ]\n}",
                  "role": "assistant"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            4688,
            112
          ],
          "id": "a2bef44f-1400-4485-a7fd-8c7583dd30fa",
          "name": "Analyzing Transcripts",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "/**\n * n8n Code Node Snippet\n *\n * This code extracts the unique meeting ID from a full Google Meet URL.\n * It assumes the input data is coming from the previous node and is available in the $json variable.\n *\n * Input (from previous node's JSON):\n * {\n * \"body\": {\n * \"googleMeetId\": \"meet.google.com/yur-qknh-jbo\"\n * }\n * }\n *\n * Output (this node's JSON):\n * {\n * \"meetId\": \"yur-qknh-jbo\"\n * }\n */\n\n// Access the googleMeetId from the body of the incoming JSON data.\nconst googleMeetId = $json.body.googleMeetId;\n\n// Check if the googleMeetId exists to prevent errors.\nif (googleMeetId && typeof googleMeetId === 'string') {\n  // Split the URL string by the \"/\" character.\n  // This creates an array, e.g., ['meet.google.com', 'yur-qknh-jbo']\n  const urlParts = googleMeetId.split('/');\n\n  // The meeting ID is the last element in the array.\n  // The pop() method removes the last element from an array and returns that element.\n  const meetId = urlParts.pop();\n\n  // Return a new JSON object with the extracted meetId.\n  // This will be the output of the Code Node.\n  return {\n    json: {\n      meetId: meetId\n    }\n  };\n}\n\n// If googleMeetId is not found, return an empty object or handle the error.\nreturn {\n  json: {}\n};\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            640,
            544
          ],
          "id": "55684ed8-245d-47dd-a3f9-5b071f729f11",
          "name": "meet Id get"
        }
      ],
      "connections": {
        "Check Interview": {
          "main": [
            [
              {
                "node": "Switch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Switch": {
          "main": [
            [
              {
                "node": "Meeting Doesn't Exist",
                "type": "main",
                "index": 0
              }
            ],
            []
          ]
        },
        "Format Transcripts 1": {
          "main": [
            [
              {
                "node": "Set Fields 1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Format Transcripts 2": {
          "main": [
            [
              {
                "node": "Set Fields 2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Fields 1": {
          "main": [
            [
              {
                "node": "Create Transcript",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Fields 2": {
          "main": [
            [
              {
                "node": "Update Transcript",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Create Transcript": {
          "main": [
            [
              {
                "node": "Summary and Questions1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Transcript": {
          "main": [
            [
              {
                "node": "Is Anyone Speaking?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Summary & Questions": {
          "main": [
            []
          ]
        },
        "Summary & Questions 2": {
          "main": [
            []
          ]
        },
        "Formatting": {
          "main": [
            [
              {
                "node": "Set Fields 3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Formatting 2": {
          "main": [
            [
              {
                "node": "Set Fields 4",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Fields 3": {
          "main": [
            [
              {
                "node": "Updating Summary & Questions",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set Fields 4": {
          "main": [
            [
              {
                "node": "Updating Summary & Questions",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Send Bot to Meeting": {
          "main": [
            [
              {
                "node": "Wait for Admission",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Meeting ID Exists?": {
          "main": [
            [
              {
                "node": "Format Transcripts 1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Format Transcripts 2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Meeting Time": {
          "main": [
            [
              {
                "node": "Extract Endtime",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extract Endtime": {
          "main": [
            [
              {
                "node": "Is Meeting Time Over?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Meeting Time Over?": {
          "main": [
            [
              {
                "node": "Edit Fields1",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Get Transcripts From Meeting2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Transcripts From Meeting": {
          "main": [
            [
              {
                "node": "Meeting ID Exists?",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Updating Summary & Questions": {
          "main": [
            [
              {
                "node": "Get Meeting Time",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Transcripts From Meeting2": {
          "main": [
            [
              {
                "node": "Wait3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyzing Transcript": {
          "main": [
            []
          ]
        },
        "Edit Fields": {
          "main": [
            [
              {
                "node": "MongoDB3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Edit Fields1": {
          "main": [
            [
              {
                "node": "Find Transcripts By Meet ID",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Switch2": {
          "main": [
            [
              {
                "node": "Analyzing Transcripts",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "No Operation, do nothing",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Formatting2": {
          "main": [
            [
              {
                "node": "Edit Fields",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB3": {
          "main": [
            [
              {
                "node": "Stop Bot in Meeting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait3": {
          "main": [
            [
              {
                "node": "Format Transcripts 2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Candidate Details": {
          "main": [
            [
              {
                "node": "Check Interview",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Wait for Admission": {
          "main": [
            [
              {
                "node": "Get Transcripts From Meeting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Is Anyone Speaking?": {
          "main": [
            [
              {
                "node": "Get Transcripts From Meeting2",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Summary and Questions",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find Transcripts By Meet ID": {
          "main": [
            [
              {
                "node": "Switch2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook": {
          "main": [
            [
              {
                "node": "meet Id get",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Summary and Questions": {
          "main": [
            [
              {
                "node": "Formatting 2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Summary and Questions1": {
          "main": [
            [
              {
                "node": "Formatting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Analyzing Transcripts": {
          "main": [
            [
              {
                "node": "Formatting2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "meet Id get": {
          "main": [
            [
              {
                "node": "Send Bot to Meeting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {
        "Webhook": [
          {
            "json": {
              "headers": {
                "host": "n8n.hireninja.site",
                "x-real-ip": "35.209.122.222",
                "x-forwarded-for": "35.209.122.222",
                "x-forwarded-host": "n8n.hireninja.site",
                "x-forwarded-proto": "https",
                "x-forwarded-ssl": "on",
                "x-forwarded-port": "443",
                "x-original-uri": "/webhook/meetbot-ideofuzion",
                "content-length": "613",
                "content-type": "application/json",
                "user-agent": "HiringPlatform/1.0",
                "accept": "*/*",
                "accept-language": "*",
                "sec-fetch-mode": "cors",
                "accept-encoding": "br, gzip, deflate"
              },
              "params": {},
              "query": {},
              "body": {
                "userId": "68a81eb5e720f8cd707d6ad2",
                "userEmail": "maxpace94@gmail.com",
                "userName": "max gared",
                "candidateId": "68ac16f16a946f2238936154",
                "candidateName": "Mubeen Sheikh",
                "candidateEmail": "aestheticedits980@gmail.com",
                "jobTitle": "Frontend Developer",
                "googleMeetId": "meet.google.com/ezc-xgxm-ssu",
                "interviewStart": "2025-08-25T13:00:00.000+05:00",
                "interviewEnd": "2025-08-25T13:30:00.000+05:00",
                "calendarEventId": "3d0ecnefiovqc06j8t5s6oe4p0",
                "timestamp": "2025-08-25T08:12:54.442Z",
                "action": "interview_session_started",
                "sessionId": "68a81eb5e720f8cd707d6ad2_68ac16f16a946f2238936154_1756109574442",
                "platform": "ideofuzion"
              },
              "webhookUrl": "https://n8n.hireninja.site/webhook/meetbot-ideofuzion",
              "executionMode": "production"
            }
          }
        ]
      },
      "versionId": "f3393ecc-e265-4012-b63a-d8d5b817f555",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-08-19T13:07:45.471Z",
          "updatedAt": "2025-08-19T13:07:45.471Z",
          "role": "workflow:owner",
          "workflowId": "QCxCZmYREkK0FODI",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "f3393ecc-e265-4012-b63a-d8d5b817f555",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:31:59.509Z",
      "updatedAt": "2025-08-25T11:31:59.509Z"
    },
    "status": "active",
    "createdAt": "2025-08-25T11:31:59.509Z",
    "updatedAt": "2025-08-25T11:31:59.509Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "gshw8NOB3t8ZH1cL",
    "name": "Cv Processing Workflow",
    "active": false,
    "workflowData": {
      "createdAt": "2025-08-19T13:06:32.130Z",
      "updatedAt": "2025-08-25T09:54:04.000Z",
      "id": "gshw8NOB3t8ZH1cL",
      "name": "Cv Processing Workflow",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            -8576,
            128
          ],
          "id": "7cd04721-964c-43f3-be4b-cc09bf05c47f",
          "name": "Loop Over Items3"
        },
        {
          "parameters": {
            "rule": {
              "interval": [
                {
                  "field": "minutes",
                  "minutesInterval": 2
                }
              ]
            }
          },
          "type": "n8n-nodes-base.scheduleTrigger",
          "typeVersion": 1.2,
          "position": [
            -9248,
            128
          ],
          "id": "75ff8bed-bea4-4af6-85a8-28bf98ff810a",
          "name": "Schedule Trigger1"
        },
        {
          "parameters": {
            "operation": "getAll",
            "simple": false,
            "filters": {
              "q": "has:attachment is:unread"
            },
            "options": {
              "downloadAttachments": true
            }
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            -9024,
            128
          ],
          "id": "cd9590d0-7e0c-4862-aa32-5ddd9ecfab2c",
          "name": "Get Emails",
          "webhookId": "98f3ce75-e47c-499b-a4f8-fa4f99ed0e22",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "fca5cf7a-004e-4169-a2ae-2832e76e5d1d",
                  "leftValue": "={{ $binary.attachment_0.fileName }}",
                  "rightValue": ".pdf",
                  "operator": {
                    "type": "string",
                    "operation": "endsWith"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.filter",
          "typeVersion": 2.2,
          "position": [
            -8800,
            -16
          ],
          "id": "9692992a-b3c0-475f-8583-6991d8f60a5a",
          "name": "Differentiating Between Mail msgs"
        },
        {
          "parameters": {
            "inputDataFieldName": "attachment_0",
            "name": "={{ $binary.attachment_0.fileName }}|",
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "root",
              "mode": "list",
              "cachedResultName": "/ (Root folder)",
              "cachedResultUrl": "https://drive.google.com/drive"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -8352,
            -160
          ],
          "id": "cdb48ed0-2648-458e-9cae-4a930ae3330c",
          "name": "Upload Cv",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "markAsRead",
            "messageId": "={{ $('Get Emails').item.json.id }}"
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            -8128,
            -160
          ],
          "id": "281969ae-a2c3-4a09-a8ea-db939d96fcc0",
          "name": "Mark a message as read",
          "webhookId": "03717270-0d73-4c94-afe2-63e191b948ca",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          },
          "disabled": true
        },
        {
          "parameters": {
            "url": "\thttps://www.googleapis.com/drive/v3/files?q='1Hx2eKRWrwXLMMx7jEU5gr5JmZA26HZwM'+in+parents and trashed=false",
            "authentication": "predefinedCredentialType",
            "nodeCredentialType": "googleDriveOAuth2Api",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "fields",
                  "value": "files(id,name,mimeType)"
                },
                {
                  "name": "pageSize",
                  "value": "1"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            -7904,
            -160
          ],
          "id": "4c6ce9ff-e222-44d5-9ddb-04e40c809307",
          "name": "Getting Essential Info",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "download",
            "fileId": {
              "__rl": true,
              "value": "={{ $('Upload Cv').item.json.id }}",
              "mode": "id"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -7680,
            -160
          ],
          "id": "73068697-e2a0-4802-941e-a22637ba069c",
          "name": "Download Cv",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "pdf",
            "options": {}
          },
          "type": "n8n-nodes-base.extractFromFile",
          "typeVersion": 1,
          "position": [
            -7456,
            -160
          ],
          "id": "6a1a34ad-db83-4f4c-8079-95eb926c31f3",
          "name": "Extracting Info"
        },
        {
          "parameters": {
            "collection": "jobCriteria",
            "options": {},
            "query": "={\n  \"$and\": [\n    {\n      \"userId\": \"{{ $json._id }}\"\n    },\n    {\n      \"Job Title\": {\n        \"$in\": {{ JSON.stringify($('Parse Ai Output').item.json.jobTitleVariations) }}\n      }\n    }\n  ]\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -6432,
            -160
          ],
          "id": "cf0fd1ad-e320-434b-a933-22a59d06248f",
          "name": "MongoDB JobPosted",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// 1. Get all necessary inputs from previous nodes\nconst matchedJob = $input.first().json;\nconst candidateData = $('Parse Ai Output').first().json;\nconst jobSkillsLlmOutput = $('Ai variations2').first().json;\nconst emailData = $('Get Emails').first().json;\nconst fileData = $('Upload Cv').first().json;\n\n// 2. Handle the case where no job was found from MongoDB\nif (!matchedJob || Object.keys(matchedJob).length === 0) {\n  return [{\n    json: {\n      match: false,\n      error: `No matching job was found for the application with subject: \"${emailData.subject}\"`,\n      emailSubject: emailData.subject,\n      originalFilename: fileData.name\n    }\n  }];\n}\n\n// 3. Extract candidate info from the 'Parse Ai Output' node\nconst candidateName = candidateData.personName || 'N/A';\nconst candidateSkillsFromLLM = candidateData.skills || {};\n\n// 4. Parse the AI output for the JOB's required skill variations\nlet jobSkillVariations = {};\ntry {\n  // The raw output from this AI node is a string that needs to be cleaned and parsed\n  const rawText = jobSkillsLlmOutput.choices[0].message.content;\n  const cleanedText = rawText.replace(/^```json\\s*/, '').replace(/\\s*```$/, '').trim();\n  jobSkillVariations = JSON.parse(cleanedText);\n} catch (error) {\n  console.error(\"Error parsing AI variations for job skills:\", error);\n  // If parsing fails, we can continue with an empty object\n}\n\n// 5. Create a flattened set of all skill variations the CANDIDATE has for fast lookups\nconst candidateSkillVariationsSet = new Set();\nfor (const skillKey in candidateSkillsFromLLM) {\n  const variations = candidateSkillsFromLLM[skillKey];\n  if (Array.isArray(variations)) {\n    variations.forEach(variation => {\n      candidateSkillVariationsSet.add(variation.toLowerCase());\n    });\n  }\n}\n\n// 6. Function to check if a required skill is present in the candidate's skill set\nconst isSkillPresent = (requiredSkill, allJobSkillVariations, candidateSkills) => {\n  const normalizedRequiredSkill = requiredSkill.toLowerCase().trim();\n  // Get the list of variations for the required skill, or just use the skill itself if no variations exist\n  const variationsToFind = allJobSkillVariations[normalizedRequiredSkill] || [normalizedRequiredSkill];\n  \n  // Check if any of the variations exist in the candidate's skill set\n  return variationsToFind.some(variation => candidateSkills.has(variation.toLowerCase()));\n};\n\n// 7. Get the job's required and optional skills from the MongoDB result\nconst requiredSkills = (matchedJob['Required Skills'] || []).map(s => s.trim()).filter(Boolean);\nconst optionalSkills = (matchedJob['Optional Skills'] || []).map(s => s.trim()).filter(Boolean);\n\n// 8. Calculate matches\nconst foundRequiredSkills = requiredSkills.filter(skill => isSkillPresent(skill, jobSkillVariations, candidateSkillVariationsSet));\nconst missingRequiredSkills = requiredSkills.filter(skill => !isSkillPresent(skill, jobSkillVariations, candidateSkillVariationsSet));\nconst foundOptionalSkills = optionalSkills.filter(skill => isSkillPresent(skill, jobSkillVariations, candidateSkillVariationsSet));\n\nconst match = missingRequiredSkills.length === 0;\nconst matchPercentage = requiredSkills.length > 0 ? Math.round((foundRequiredSkills.length / requiredSkills.length) * 100) : 100;\n\n// 9. Return the final structured output\nreturn [{\n  json: {\n    match: match,\n    matchPercentage: matchPercentage,\n    candidateName: candidateName,\n    jobTitle: matchedJob[\"Job Title\"],\n    jobId: matchedJob[\"Job ID\"],\n    foundSkills: foundRequiredSkills,\n    missingSkills: missingRequiredSkills,\n    foundOptionalSkills: foundOptionalSkills,\n    totalRequiredSkills: requiredSkills.length,\n    totalOptionalSkills: optionalSkills.length,\n    candidateEmail: emailData.from.value[0].address,\n    originalFilename: fileData.name,\n    googleDriveFileId: fileData.id,\n  }\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -6208,
            -64
          ],
          "id": "d3e2b208-a5aa-4c30-bcd6-67cd65e051e1",
          "name": "Matching Skills"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 2
              },
              "conditions": [
                {
                  "id": "0705b104-0012-41d4-8fef-04315abe8a8b",
                  "leftValue": "={{ $json.match }}",
                  "rightValue": "",
                  "operator": {
                    "type": "boolean",
                    "operation": "true",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2.2,
          "position": [
            -5920,
            -64
          ],
          "id": "682d7bd6-0cff-4df8-ba44-e579c4f77863",
          "name": "If Candidate Qualifies"
        },
        {
          "parameters": {
            "collection": "candidates",
            "options": {
              "limit": "={{ 1 }}",
              "sort": "={\n  \"_id\": -1\n}\n"
            },
            "query": "={\n  \"userId\": \"{{ $('Find documents').item.json._id }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -5184,
            -160
          ],
          "id": "085b5d2d-9526-4aff-99e7-6b1dd2f19e48",
          "name": "MongoDB Candidate records",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// This script finds the next available 30-min slot using Google Calendar event data AND unavailable slots from MongoDB.\n\n\n\n// FIXED VERSION: Properly handles unavailable slots without skipping entire days\n\n\n\n// Helper to get current time in Pakistan timezone\n\nfunction getCurrentPakistanTime() {\n\n    const now = new Date();\n\n    return now;\n\n}\n\n\n\n// Helper to format a Date object into a readable time like \"10:30 AM\"\n\nfunction formatToReadableTime(date) {\n\n    return date.toLocaleTimeString('en-US', {\n\n        timeZone: 'Asia/Karachi',\n\n        hour: '2-digit',\n\n        minute: '2-digit',\n\n        hour12: true\n\n    });\n\n}\n\n\n\n// Helper to format a Date object into a readable date string like \"Tuesday, July 29, 2025\"\n\nfunction formatToReadableDate(date) {\n\n    return date.toLocaleDateString('en-US', {\n\n        timeZone: 'Asia/Karachi',\n\n        weekday: 'long',\n\n        year: 'numeric',\n\n        month: 'long',\n\n        day: 'numeric'\n\n    });\n\n}\n\n\n\n// Helper to check if a slot time is within business hours and weekdays (in Pakistan timezone)\n\nfunction isValidBusinessTime(dateTime) {\n\n    if (!dateTime || !(dateTime instanceof Date)) {\n\n        return false;\n\n    }\n\n    \n\n    // Get Pakistan timezone info\n\n    const pktDay = dateTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n\n    const pktHour = parseInt(dateTime.toLocaleTimeString('en-US', { \n\n        timeZone: 'Asia/Karachi', \n\n        hour12: false,\n\n        hour: '2-digit'\n\n    }));\n\n\n\n    // Check if it's a weekend\n\n    if (pktDay === 'Sat' || pktDay === 'Sun') {\n\n        return false;\n\n    }\n\n    \n\n    // Check if it's within business hours (10 AM to 4 PM PKT)\n\n    if (pktHour < 10 || pktHour >= 16) {\n\n        return false;\n\n    }\n\n    \n\n    return true;\n\n}\n\n\n\n// Helper to check if a slot's END time is in the past\n\nfunction isPastCurrentTime(scheduleEndDateTime) {\n\n    if (!scheduleEndDateTime || !(scheduleEndDateTime instanceof Date)) {\n\n        return true;\n\n    }\n\n    return scheduleEndDateTime <= getCurrentPakistanTime();\n\n}\n\n\n\n// Helper to move to the next business day at 10:00 AM PKT\n\nfunction moveToNextBusinessDay(currentTime) {\n\n    let nextDay = new Date(currentTime);\n\n    nextDay.setUTCDate(nextDay.getUTCDate() + 1);\n\n    \n\n    // Skip weekends\n\n    const dayOfWeek = nextDay.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n\n    if (dayOfWeek === 'Sat') {\n\n        nextDay.setUTCDate(nextDay.getUTCDate() + 2); // Move to Monday\n\n    } else if (dayOfWeek === 'Sun') {\n\n        nextDay.setUTCDate(nextDay.getUTCDate() + 1); // Move to Monday\n\n    }\n\n    \n\n    // Set to 10:00 AM Pakistan time (which is 5:00 AM UTC)\n\n    nextDay.setUTCHours(5, 0, 0, 0);\n\n    \n\n    return nextDay;\n\n}\n\n\n\n// Helper to format a Date object into a full ISO string for PKT\n\nfunction formatToISOString(date) {\n\n    // Convert to Pakistan timezone and format as ISO string\n\n    const pktDate = new Date(date.toLocaleString(\"en-US\", { timeZone: \"Asia/Karachi\" }));\n\n    const year = pktDate.getFullYear();\n\n    const month = String(pktDate.getMonth() + 1).padStart(2, '0');\n\n    const day = String(pktDate.getDate()).padStart(2, '0');\n\n    const hours = String(pktDate.getHours()).padStart(2, '0');\n\n    const minutes = String(pktDate.getMinutes()).padStart(2, '0');\n\n    const seconds = String(pktDate.getSeconds()).padStart(2, '0');\n\n    \n\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.000+05:00`;\n\n}\n\n\n\n// Main logic starts here\n\nconst allItems = items;\n\n\n\n// 1. Get calendar events from Google Calendar (from \"Get many events\" node)\n\nconst calendarEvents = $('Get many events').all();\n\nconst scheduledFromCalendar = calendarEvents\n\n    .filter(item => item.json && item.json.start && item.json.start.dateTime)\n\n    .map(item => {\n\n        const startDateTime = new Date(item.json.start.dateTime);\n\n        const endDateTime = item.json.end && item.json.end.dateTime \n\n            ? new Date(item.json.end.dateTime) \n\n            : new Date(startDateTime.getTime() + 30 * 60 * 1000);\n\n        return { \n\n            startDateTime, \n\n            endDateTime, \n\n            source: 'calendar',\n\n            id: item.json.id || 'unknown'\n\n        };\n\n    });\n\n\n\n// 2. Get unavailable slots from MongoDB (from \"Unavailable Slots\" node)\n\nconst unavailableSlots = $('Unavailable Slots').all();\n\nconst scheduledFromUnavailable = unavailableSlots\n\n    .filter(item => item.json && item.json.startTime && item.json.endTime)\n\n    .map(item => {\n\n        try {\n\n            // Clean the datetime strings to remove any extra quotes or backslashes\n\n            const cleanStartTime = item.json.startTime.toString().replace(/['\"\\\\]/g, '');\n\n            const cleanEndTime = item.json.endTime.toString().replace(/['\"\\\\]/g, '');\n\n            \n\n            const startDateTime = new Date(cleanStartTime);\n\n            const endDateTime = new Date(cleanEndTime);\n\n            \n\n            // Validate the dates\n\n            if (isNaN(startDateTime.getTime()) || isNaN(endDateTime.getTime())) {\n\n                console.error('Invalid date found in unavailable slot:', {\n\n                    original: item.json,\n\n                    cleaned: { startTime: cleanStartTime, endTime: cleanEndTime }\n\n                });\n\n                return null;\n\n            }\n\n            \n\n            return { \n\n                startDateTime, \n\n                endDateTime, \n\n                source: 'unavailable',\n\n                reason: item.json.reason || 'Unavailable',\n\n                id: item.json._id || 'unknown'\n\n            };\n\n        } catch (error) {\n\n            console.error('Error parsing unavailable slot:', error, item.json);\n\n            return null;\n\n        }\n\n    })\n\n    .filter(Boolean); // Remove null entries\n\n\n\n// 3. Combine both calendar events and unavailable slots\n\nconst allScheduledSlots = [...scheduledFromCalendar, ...scheduledFromUnavailable];\n\n\n\n// 4. Filter out only past events (keep all future events regardless of business hours for conflict checking)\n\nconst allFutureSlots = allScheduledSlots.filter(slot =>\n\n    !isPastCurrentTime(slot.endDateTime)\n\n);\n\n\n\n// 5. Conflict checker - works with Date objects\n\nfunction hasTimeConflict(proposedStart, proposedEnd, existingSlots) {\n\n    return existingSlots.some(slot => {\n\n        const slotStart = slot.startDateTime;\n\n        const slotEnd = slot.endDateTime;\n\n        // Standard overlap check: (StartA < EndB) and (StartB < EndA)\n\n        return (proposedStart < slotEnd) && (slotStart < proposedEnd);\n\n    });\n\n}\n\n\n\n// 6. Find the next available 30-minute slot\n\nfunction getNextSlot(conflictingSlots) {\n\n    // Start with current Pakistan time\n\n    let searchTime = getCurrentPakistanTime();\n\n    const debugInfo = {\n\n        startingTime: searchTime.toISOString(),\n\n        startingTimeReadable: formatToReadableTime(searchTime),\n\n        isCurrentTimeBusinessHours: isValidBusinessTime(searchTime),\n\n        totalConflictingSlots: conflictingSlots.length,\n\n        calendarEvents: conflictingSlots.filter(s => s.source === 'calendar').length,\n\n        unavailableSlots: conflictingSlots.filter(s => s.source === 'unavailable').length\n\n    };\n\n    \n\n    // Round up to the next 30-minute mark\n\n    const currentMinutes = searchTime.getMinutes();\n\n    const minutesToAdd = currentMinutes % 30 === 0 ? 30 : 30 - (currentMinutes % 30);\n\n    searchTime = new Date(searchTime.getTime() + minutesToAdd * 60000);\n\n    searchTime.setSeconds(0, 0);\n\n    \n\n    debugInfo.roundedTime = searchTime.toISOString();\n\n    debugInfo.roundedTimeReadable = formatToReadableTime(searchTime);\n\n    debugInfo.isRoundedTimeBusinessHours = isValidBusinessTime(searchTime);\n\n    \n\n    // Search for available slot\n\n    let attemptCount = 0;\n\n    for (let i = 0; i < 2000; i++) { // Limit attempts to prevent infinite loops\n\n        attemptCount++;\n\n        \n\n        // First, check if this time slot is within business hours\n\n        if (!isValidBusinessTime(searchTime)) {\n\n            // If it's outside business hours, move to next 30-min slot or next business day\n\n            if (searchTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' }) === 'Sat' || \n\n                searchTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' }) === 'Sun') {\n\n                // If it's weekend, jump to next Monday\n\n                searchTime = moveToNextBusinessDay(searchTime);\n\n            } else {\n\n                // If it's just outside business hours but on a weekday, move to next day\n\n                const pktHour = parseInt(searchTime.toLocaleTimeString('en-US', { \n\n                    timeZone: 'Asia/Karachi', \n\n                    hour12: false,\n\n                    hour: '2-digit'\n\n                }));\n\n                \n\n                if (pktHour >= 16) {\n\n                    // After business hours, move to next business day\n\n                    searchTime = moveToNextBusinessDay(searchTime);\n\n                } else {\n\n                    // Before business hours, move to 10:00 AM same day\n\n                    searchTime = new Date(searchTime);\n\n                    searchTime.setUTCHours(5, 0, 0, 0); // 10:00 AM PKT = 5:00 AM UTC\n\n                }\n\n            }\n\n            continue;\n\n        }\n\n        \n\n        const proposedEnd = new Date(searchTime.getTime() + 30 * 60000);\n\n        \n\n        // Check if proposed end time goes beyond business hours\n\n        if (!isValidBusinessTime(new Date(proposedEnd.getTime() - 1000))) { // Check 1 second before end\n\n            // If end time is outside business hours, move to next business day\n\n            searchTime = moveToNextBusinessDay(searchTime);\n\n            continue;\n\n        }\n\n        \n\n        // Check for conflicts with existing events/unavailable slots\n\n        const conflictingSlot = conflictingSlots.find(slot => {\n\n            const slotStart = slot.startDateTime;\n\n            const slotEnd = slot.endDateTime;\n\n            return (searchTime < slotEnd) && (slotStart < proposedEnd);\n\n        });\n\n        \n\n        // If no conflict is found, we have our slot!\n\n        if (!conflictingSlot) {\n\n            debugInfo.foundSlot = {\n\n                start: searchTime.toISOString(),\n\n                end: proposedEnd.toISOString(),\n\n                attempts: attemptCount,\n\n                startPKT: formatToReadableTime(searchTime),\n\n                endPKT: formatToReadableTime(proposedEnd),\n\n                datePKT: formatToReadableDate(searchTime)\n\n            };\n\n            return { startDateTime: searchTime, endDateTime: proposedEnd, debugInfo };\n\n        } else {\n\n            // Log the conflict for debugging\n\n            if (attemptCount <= 10) { // Log more conflicts for better debugging\n\n                debugInfo[`conflict_${attemptCount}`] = {\n\n                    proposedStart: formatToReadableTime(searchTime),\n\n                    proposedEnd: formatToReadableTime(proposedEnd),\n\n                    proposedDate: formatToReadableDate(searchTime),\n\n                    conflictsWith: {\n\n                        source: conflictingSlot.source,\n\n                        start: formatToReadableTime(conflictingSlot.startDateTime),\n\n                        end: formatToReadableTime(conflictingSlot.endDateTime),\n\n                        date: formatToReadableDate(conflictingSlot.startDateTime),\n\n                        reason: conflictingSlot.reason || 'Calendar event'\n\n                    }\n\n                };\n\n            }\n\n        }\n\n        \n\n        // Move to next 30-minute slot\n\n        searchTime = new Date(searchTime.getTime() + 30 * 60000);\n\n    }\n\n\n\n    throw new Error(`Could not find an available slot within ${attemptCount} attempts.`);\n\n}\n\n\n\n// 7. Execute the logic and format the output\n\nconst nextAvailableSlot = getNextSlot(allFutureSlots);\n\n\n\n// Create all the different formats\n\nconst dateReadable = formatToReadableDate(nextAvailableSlot.startDateTime);\n\nconst startTimeReadable = formatToReadableTime(nextAvailableSlot.startDateTime);\n\nconst endTimeReadable = formatToReadableTime(nextAvailableSlot.endDateTime);\n\nconst startTimeISO = formatToISOString(nextAvailableSlot.startDateTime);\n\nconst endTimeISO = formatToISOString(nextAvailableSlot.endDateTime);\n\n\n\nreturn [{\n\n    json: {\n\n        // Human-readable date and time strings\n\n        date: dateReadable,\n\n        startTime: startTimeReadable,\n\n        endTime: endTimeReadable,\n\n        // Full ISO strings for machine use\n\n        startTimeISO: startTimeISO,\n\n        endTimeISO: endTimeISO,\n\n        // Debugging info\n\n        debug: {\n\n            currentPakistanTime: getCurrentPakistanTime().toISOString(),\n\n            currentPakistanTimeReadable: formatToReadableTime(getCurrentPakistanTime()),\n\n            totalFutureSlots: allFutureSlots.length,\n\n            calendarEventsCount: scheduledFromCalendar.length,\n\n            unavailableSlotsCount: scheduledFromUnavailable.length,\n\n            futureCalendarEvents: allFutureSlots.filter(s => s.source === 'calendar').length,\n\n            futureUnavailableSlots: allFutureSlots.filter(s => s.source === 'unavailable').length,\n\n            unavailableSlotsDetailed: scheduledFromUnavailable.map(s => ({\n\n                start: formatToReadableTime(s.startDateTime),\n\n                end: formatToReadableTime(s.endDateTime),\n\n                date: formatToReadableDate(s.startDateTime),\n\n                reason: s.reason,\n\n                startISO: s.startDateTime.toISOString(),\n\n                endISO: s.endDateTime.toISOString()\n\n            })),\n\n            searchProcess: nextAvailableSlot.debugInfo\n\n        }\n\n    }\n\n}];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -4960,
            -160
          ],
          "id": "6f80c3d5-6fea-4a19-8fdd-1e8c3874bd3d",
          "name": "Candidate Info Fetch"
        },
        {
          "parameters": {
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "start": "={{ $json.startTimeISO }}",
            "end": "={{ $json.endTimeISO }}",
            "additionalFields": {
              "attendees": [
                "={{ $('Matching Skills').first().json.candidateEmail }}"
              ],
              "conferenceDataUi": {
                "conferenceDataValues": {
                  "conferenceSolution": "hangoutsMeet"
                }
              },
              "description": "=The candidate has the required skills in: {{ $('If Candidate Qualifies').first().json.foundSkills }}\nResume Link: https://drive.google.com/open?id={{ $('If Candidate Qualifies').first().json.googleDriveFileId }}\nCandidate email: {{ $('If Candidate Qualifies').first().json.candidateEmail }}\n",
              "summary": "=Interview With {{ $('Matching Skills').first().json.candidateName }} for {{ $('Matching Skills').first().json.jobTitle }}\n"
            }
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            -4736,
            -160
          ],
          "id": "b6da7c93-808b-4181-8cb2-0b2d4209f82b",
          "name": "Schedule a meeting",
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "values": {
              "string": [
                {
                  "name": "Candidate Name",
                  "value": "={{ $('If Candidate Qualifies').first().json.candidateName }}"
                },
                {
                  "name": "Email",
                  "value": "={{ $('If Candidate Qualifies').first().json.candidateEmail }}"
                },
                {
                  "name": "Job Title",
                  "value": "={{ $('If Candidate Qualifies').first().json.jobTitle }}"
                },
                {
                  "name": "Interview Start",
                  "value": "={{ $('Candidate Info Fetch').item.json.startTimeISO }}"
                },
                {
                  "name": "Interview End",
                  "value": "={{ $('Candidate Info Fetch').item.json.endTimeISO }}"
                },
                {
                  "name": "Calendar Event ID",
                  "value": "={{ $('Schedule a meeting').item.json.id }}"
                },
                {
                  "name": "Calender Event Link",
                  "value": "={{ $('Schedule a meeting').item.json.htmlLink }}"
                },
                {
                  "name": "Google Meet Id",
                  "value": "={{ $('Schedule a meeting').item.json.conferenceData.entryPoints[0].label }}"
                },
                {
                  "name": "status",
                  "value": "Interview Scheduled"
                },
                {
                  "name": "Resume Link",
                  "value": "={{ $('Upload Cv').first().json.webViewLink }}"
                },
                {
                  "name": "userId",
                  "value": "={{ $('Find documents').first().json._id.toString().trim() }}"
                }
              ]
            },
            "options": {}
          },
          "name": "Set All info",
          "type": "n8n-nodes-base.set",
          "position": [
            -4288,
            -160
          ],
          "typeVersion": 1,
          "id": "d428daa6-d9ed-478c-8da6-b14e0bcaa028"
        },
        {
          "parameters": {
            "operation": "insert",
            "collection": "candidates",
            "fields": "=Candidate Name, Email, Job Title, Interview Start, Interview End, Calendar Event ID, Calender Event Link, Google Meet Id, status, Resume Link, userId",
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -4064,
            -160
          ],
          "id": "7837444c-eaca-40c9-a4b6-76cb16f1c24c",
          "name": "MongoDB insert All Records",
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "move",
            "fileId": {
              "__rl": true,
              "value": "={{ $('Upload Cv').first().json.id }}",
              "mode": "id"
            },
            "driveId": {
              "__rl": true,
              "mode": "list",
              "value": "My Drive"
            },
            "folderId": {
              "__rl": true,
              "value": "1tEfuIpyO8nbw7qyuTFcgrzzp-d65wnw-",
              "mode": "list",
              "cachedResultName": "Processed",
              "cachedResultUrl": "https://drive.google.com/drive/folders/1tEfuIpyO8nbw7qyuTFcgrzzp-d65wnw-"
            }
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -3840,
            8
          ],
          "id": "5e16fe09-1772-4cb8-9f84-4e0d956dab91",
          "name": "Move to Processed",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          },
          "disabled": true
        },
        {
          "parameters": {
            "operation": "deleteFile",
            "fileId": {
              "__rl": true,
              "value": "={{ $json.googleDriveFileId }}",
              "mode": "id"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.googleDrive",
          "typeVersion": 3,
          "position": [
            -5632,
            32
          ],
          "id": "c2f5a3b6-9f54-4e3d-b7ce-af0560c9efb2",
          "name": "Delete Unqualified Cv",
          "credentials": {
            "googleDriveOAuth2Api": {
              "id": "oxsis0UyHEuqLsjX",
              "name": "Google Drive - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "getAll",
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "timeMax": "={{ $now.plus({ month: 1 }) }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            -5632,
            -160
          ],
          "id": "672396b0-9e38-418f-854c-80c58ba19bd5",
          "name": "Get many events",
          "alwaysOutputData": true,
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "jsCode": "// Get the output from the AI node\n\n// The .first().json will get the first item from the incoming data\n\nconst aiNodeOutput = $('Processing Candidate info').first().json;\n\n\n\n// Directly access the content object from the correct path\n\n// The desired data is inside the 'choices' array, then 'message', then 'content'\n\nconst parsedJson = aiNodeOutput.choices[0].message.content;\n\n\n\n// Return the object for the next nodes to use\n\nreturn [{ json: parsedJson }];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -6880,
            -160
          ],
          "id": "9228d40c-6633-47a7-a667-84781bc853d2",
          "name": "Parse Ai Output"
        },
        {
          "parameters": {
            "jsCode": "// Get the required skills from the input\nconst requiredSkills = $json['Required Skills'];\n\n// Construct the prompt text. We are keeping it simple to be safe.\nconst promptText = \"For each skill in the array \" + JSON.stringify(requiredSkills) + \", create a JSON object. The keys should be the lowercase skill names, and the values should be an array of their common variations and typos. Return ONLY the JSON object, with no other text or markdown.\";\n\n// Build the final request body object\nconst geminiBody = {\n  \"contents\": [{\n    \"parts\": [{\n      \"text\": promptText\n    }]\n  }]\n};\n\n// Return the complete body for the next node to use\nreturn [{ json: geminiBody }];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            -6208,
            -256
          ],
          "id": "dbb63f79-15c6-4c33-ad84-69c559636b27",
          "name": "Prepare Gemini Body"
        },
        {
          "parameters": {
            "collection": "unavailable_slots",
            "options": {},
            "query": "={\n  \"userId\": \"{{ $('Find documents').item.json._id }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -5408,
            -160
          ],
          "id": "58d19714-180a-41fe-a7fb-73a621ae41b5",
          "name": "Unavailable Slots",
          "alwaysOutputData": true,
          "executeOnce": false,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "sendTo": "={{ $('If Candidate Qualifies').first().json.candidateEmail }}",
            "subject": "=Interview at Ideofuzion for {{ $('If Candidate Qualifies').first().json.jobTitle }}",
            "message": "=<div style=\"font-family: Arial, sans-serif; line-height: 1.6; font-size: 15px; color: #333;\">\n  <p>Dear <strong>{{ $('If Candidate Qualifies').first().json.candidateName }}</strong>,</p>\n\n  <p>Thank you for applying for the position of <strong>{{ $('If Candidate Qualifies').first().json.jobTitle }}</strong> at our company.</p>\n\n  <p>We have reviewed your resume and would like to invite you for a virtual interview to further discuss your application.</p>\n\n  <p>\n    📅 <strong>Interview Date</strong>: {{ $('Candidate Info Fetch').item.json.date }}<br>\n    🕘 <strong>Time Slot</strong>:{{ $('Candidate Info Fetch').item.json.startTime }} - {{ $('Candidate Info Fetch').item.json.endTime }}<br>\n    📍 <strong>Location</strong>: \n    <a href=\"{{ $json.conferenceData.entryPoints[0].uri }}\" target=\"_blank\" style=\"color: #1a73e8;\">\n      Google Meet Link\n    </a><br>\n  </p>\n\n  <p>We look forward to speaking with you!</p>\n\n  <p>\n    Best regards,<br>\n    <strong>HR Team</strong><br>\n    Ideofuzion\n  </p>\n</div>\n",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            -4512,
            -160
          ],
          "id": "fd39df23-7c0e-4a4f-b08f-7bef28f046e7",
          "name": "Email to Candidate",
          "webhookId": "d0ce039a-3a82-4b4c-8f54-65a6a007488f",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-4.1-mini",
              "mode": "list",
              "cachedResultName": "GPT-4.1-MINI"
            },
            "messages": {
              "values": [
                {
                  "content": "={\n  \"contents\": [\n    {\n      \"parts\": [\n        {\n          \"text\": \"You are an AI assistant for an automated CV and Job Application processing system.\\n\\nYour task is to read the provided RESUME TEXT and EMAIL SUBJECT, then perform three actions:\\n1. Return the name of the person from the resume.\\n2. Identify *all* skills from the resume and provide a list of common variations for each skill.\\n3. Identify the core job title from the EMAIL SUBJECT, ignore extra words like 'Application for', and provide a list of its common standardized variations.\\n\\nThe response must be in the exact JSON format specified below. Do not include any explanations or extra text.\\n\\nHere is the resume text:\\n\\\"\\\"\\\"\\n{{ $json.text }}\\n\\\"\\\"\\\"\\n\\nHere is the email subject:\\n\\\"\\\"\\\"\\n{{ $('Get Emails').item.json.subject }}\\n\\\"\\\"\\\"\\n\\nAnd here is the desired output format:\\n```json\\n{\\n  \\\"personName\\\": \\\"[Extracted Person's Name]\\\",\\n  \\\"skills\\\": {\\n    \\\"skill1\\\": [\\\"variation1\\\", \\\"variation2\\\"],\\n    \\\"skill2\\\": [\\\"variationA\\\", \\\"variationB\\\"]\\n  },\\n  \\\"jobTitleVariations\\\": [\\n    \\\"jobTitleVariation1\\\",\\n    \\\"jobTitleVariation2\\\"\\n  ]\\n}\\n```\\n\\nFor example, if the resume is for 'John Doe' and mentions 'JS', and the email subject is 'Applying for the Sr. Backend Dev role', your output must look like this:\\n```json\\n{\\n  \\\"personName\\\": \\\"John Doe\\\",\\n  \\\"skills\\\": {\\n    \\\"javascript\\\": [\\\"js\\\", \\\"javascript\\\", \\\"java script\\\", \\\"ecmascript\\\"],\\n    \\\"python\\\": [\\\"python\\\", \\\"py\\\", \\\"python3\\\"]\\n  },\\n  \\\"jobTitleVariations\\\": [\\n    \\\"Senior Backend Developer\\\",\\n    \\\"Sr. Backend Developer\\\",\\n    \\\"Senior Backend Dev\\\"\\n  ]\\n}\\n```\"\n        }\n      ]\n    }\n  ]\n}",
                  "role": "assistant"
                }
              ]
            },
            "simplify": false,
            "jsonOutput": true,
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            -7232,
            -160
          ],
          "id": "cc0aba92-d77f-437c-b1c1-7bbdaa2ea769",
          "name": "Processing Candidate info",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-4.1-mini",
              "mode": "list",
              "cachedResultName": "GPT-4.1-MINI"
            },
            "messages": {
              "values": [
                {
                  "content": "={{ JSON.stringify($json) }}",
                  "role": "assistant"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            -5984,
            -256
          ],
          "id": "5aae6979-70ad-4090-9216-d5dd9f8eddfc",
          "name": "Ai variations2",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "collection": "users",
            "options": {},
            "query": "={\n  \"email\": \"{{ $('Get Emails').first().json.to.value[0].address }}\"\n}\n"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            -6656,
            -160
          ],
          "id": "5c99e082-4bc1-4d26-85e0-e0fd78c6cdc2",
          "name": "Find documents",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        }
      ],
      "connections": {
        "Loop Over Items3": {
          "main": [
            [
              {
                "node": "Get Emails",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Upload Cv",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule Trigger1": {
          "main": [
            [
              {
                "node": "Get Emails",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Emails": {
          "main": [
            [
              {
                "node": "Differentiating Between Mail msgs",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Differentiating Between Mail msgs": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Upload Cv": {
          "main": [
            [
              {
                "node": "Mark a message as read",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Mark a message as read": {
          "main": [
            [
              {
                "node": "Getting Essential Info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Getting Essential Info": {
          "main": [
            [
              {
                "node": "Download Cv",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Download Cv": {
          "main": [
            [
              {
                "node": "Extracting Info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Extracting Info": {
          "main": [
            [
              {
                "node": "Processing Candidate info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB JobPosted": {
          "main": [
            [
              {
                "node": "Prepare Gemini Body",
                "type": "main",
                "index": 0
              },
              {
                "node": "Matching Skills",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Matching Skills": {
          "main": [
            [
              {
                "node": "If Candidate Qualifies",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "If Candidate Qualifies": {
          "main": [
            [
              {
                "node": "Get many events",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Delete Unqualified Cv",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB Candidate records": {
          "main": [
            [
              {
                "node": "Candidate Info Fetch",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Candidate Info Fetch": {
          "main": [
            [
              {
                "node": "Schedule a meeting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Schedule a meeting": {
          "main": [
            [
              {
                "node": "Email to Candidate",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Set All info": {
          "main": [
            [
              {
                "node": "MongoDB insert All Records",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "MongoDB insert All Records": {
          "main": [
            [
              {
                "node": "Move to Processed",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Move to Processed": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Delete Unqualified Cv": {
          "main": [
            [
              {
                "node": "Loop Over Items3",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get many events": {
          "main": [
            [
              {
                "node": "Unavailable Slots",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Parse Ai Output": {
          "main": [
            [
              {
                "node": "Find documents",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Gemini Body": {
          "main": [
            [
              {
                "node": "Ai variations2",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Unavailable Slots": {
          "main": [
            [
              {
                "node": "MongoDB Candidate records",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email to Candidate": {
          "main": [
            [
              {
                "node": "Set All info",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Processing Candidate info": {
          "main": [
            [
              {
                "node": "Parse Ai Output",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find documents": {
          "main": [
            [
              {
                "node": "MongoDB JobPosted",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": {
        "node:Schedule Trigger1": {
          "recurrenceRules": []
        }
      },
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "a55ea6a6-2fdc-4031-9d38-91e526e56a57",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-08-19T13:06:32.140Z",
          "updatedAt": "2025-08-19T13:06:32.140Z",
          "role": "workflow:owner",
          "workflowId": "gshw8NOB3t8ZH1cL",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "a55ea6a6-2fdc-4031-9d38-91e526e56a57",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:31:59.797Z",
      "updatedAt": "2025-08-25T11:31:59.797Z"
    },
    "status": "inactive",
    "createdAt": "2025-08-25T11:31:59.797Z",
    "updatedAt": "2025-08-25T11:31:59.797Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "i4GiBdoxJVIbPjDX",
    "name": "My workflow",
    "active": false,
    "workflowData": {
      "createdAt": "2025-08-21T12:06:12.452Z",
      "updatedAt": "2025-08-21T12:06:12.452Z",
      "id": "i4GiBdoxJVIbPjDX",
      "name": "My workflow",
      "active": false,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {},
          "id": "2413eb32-fe0f-462a-8f91-dc6e24d6be03",
          "name": "When clicking ‘Test workflow’",
          "type": "n8n-nodes-base.manualTrigger",
          "position": [
            464,
            464
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "33c46c17-3b0d-43eb-a9c9-3d1b8a71728f",
                  "name": "services",
                  "type": "array",
                  "value": "\n[\n  {\n    \"service\": \"googleDocsOAuth2Api\"\n  },\n  {\n    \"service\": \"googleSheetsOAuth2Api\"\n  },\n  {\n    \"service\": \"googleSlidesOAuth2Api\"\n  },\n  {\n    \"service\": \"googleDriveOAuth2Api\"\n  },\n  {\n    \"service\": \"gmailOAuth2\"\n  },\n  {\n    \"service\": \"googleCalendarOAuth2Api\"\n  },\n  {\n    \"service\": \"googleContactsOAuth2Api\"\n  }\n]"
                }
              ]
            },
            "options": {}
          },
          "id": "32642636-7957-446e-aa68-5a37b1e0ff77",
          "name": "Services",
          "type": "n8n-nodes-base.set",
          "position": [
            1072,
            464
          ],
          "typeVersion": 3.4
        },
        {
          "parameters": {
            "mode": "raw",
            "jsonOutput": "  {\n    \"web\": {\n      \"client_id\": \"\",\n      \"project_id\": \"\",\n      \"auth_uri\": \"\",\n      \"token_uri\": \"\",\n      \"auth_provider_x509_cert_url\": \"\",\n      \"client_secret\": \"\",\n      \"redirect_uris\": [\n        \"\"\n      ]\n    }\n  }",
            "options": {}
          },
          "id": "839c2ef2-2d22-4e85-8c6b-c5a99ba657f5",
          "name": "Google JSON",
          "type": "n8n-nodes-base.set",
          "position": [
            656,
            432
          ],
          "notesInFlow": true,
          "typeVersion": 3.4,
          "notes": "Include the entire Google JSON file, which can be obtained either when creating the OAuth 2.0 credentials or afterward from the Credentials page."
        },
        {
          "parameters": {
            "fieldToSplitOut": "services",
            "options": {}
          },
          "id": "60c17dfe-dcbc-48ac-aab0-53c9bd7e7144",
          "name": "Split Out",
          "type": "n8n-nodes-base.splitOut",
          "position": [
            1280,
            464
          ],
          "typeVersion": 1
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "18e7a65f-904a-47be-94b6-06c7167c2c62",
                  "name": "Google Email",
                  "type": "string",
                  "value": "username@gmail.com"
                }
              ]
            },
            "options": {}
          },
          "id": "aab1e432-460e-4054-add9-cf0983b5a25c",
          "name": "Google Email",
          "type": "n8n-nodes-base.set",
          "position": [
            848,
            464
          ],
          "notesInFlow": true,
          "typeVersion": 3.4,
          "notes": "Set to your email address."
        },
        {
          "parameters": {
            "resource": "credential",
            "name": "={{ $('Google Email').item.json['Google Email'] }} - {{ $json.service }}",
            "credentialTypeName": "={{ $json.service }}",
            "data": "={\n \"clientId\":\"{{ $('Google JSON').item.json.web.client_id }}\",\n \"clientSecret\": \"{{ $('Google JSON').item.json.web.client_secret }}\"\n}",
            "requestOptions": {}
          },
          "id": "7af953bd-d00c-4716-b738-6b198f27ee19",
          "name": "n8n Create Credentials",
          "type": "n8n-nodes-base.n8n",
          "position": [
            1568,
            464
          ],
          "typeVersion": 1,
          "credentials": {
            "n8nApi": {
              "id": "WFbczHeaEndFoGyS",
              "name": "n8n account"
            }
          }
        },
        {
          "parameters": {
            "content": "## Create Google Creds\nI found manually creating credentials for multiple google accounts to be rather tedious, and if not named well hard to identify later.   \n\nThis will create credentials with the email address for all of the basic services. \n\n### Set the values of:\n* Google JSON\nInclude the entire Google JSON file, which can be obtained either when creating the OAuth 2.0 credentials or afterward from the Credentials page.\n\n* Google Email\nSet to your email address\n\n*n8n\nSet your API connection\n\n### Sign In\nYou still need to sign in to each credential that was created.",
            "height": 520,
            "width": 360,
            "color": 6
          },
          "id": "1bf3477b-7101-443d-b5a7-e243964bac98",
          "name": "Sticky Note",
          "type": "n8n-nodes-base.stickyNote",
          "position": [
            0,
            -48
          ],
          "typeVersion": 1
        }
      ],
      "connections": {
        "Services": {
          "main": [
            [
              {
                "node": "Split Out",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split Out": {
          "main": [
            [
              {
                "node": "n8n Create Credentials",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google JSON": {
          "main": [
            [
              {
                "node": "Google Email",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Google Email": {
          "main": [
            [
              {
                "node": "Services",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "When clicking ‘Test workflow’": {
          "main": [
            [
              {
                "node": "Google JSON",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "6cad92b1-28d2-4b59-9057-8c322aaa911b",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-08-21T12:06:12.463Z",
          "updatedAt": "2025-08-21T12:06:12.463Z",
          "role": "workflow:owner",
          "workflowId": "i4GiBdoxJVIbPjDX",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "6cad92b1-28d2-4b59-9057-8c322aaa911b",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:32:00.095Z",
      "updatedAt": "2025-08-25T11:32:00.095Z"
    },
    "status": "inactive",
    "createdAt": "2025-08-25T11:32:00.095Z",
    "updatedAt": "2025-08-25T11:32:00.095Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "mpiXqRo5n5P1vrnh",
    "name": "oldest",
    "active": false,
    "workflowData": {
      "createdAt": "2025-08-22T10:22:11.146Z",
      "updatedAt": "2025-08-22T10:22:11.146Z",
      "id": "mpiXqRo5n5P1vrnh",
      "name": "oldest",
      "active": false,
      "isArchived": false,
      "nodes": [],
      "connections": {},
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": null,
      "pinData": {},
      "versionId": "66474948-3431-4ae9-9192-c663a17263a7",
      "triggerCount": 0,
      "shared": [
        {
          "createdAt": "2025-08-22T10:22:11.153Z",
          "updatedAt": "2025-08-22T10:22:11.153Z",
          "role": "workflow:owner",
          "workflowId": "mpiXqRo5n5P1vrnh",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "66474948-3431-4ae9-9192-c663a17263a7",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:32:00.397Z",
      "updatedAt": "2025-08-25T11:32:00.397Z"
    },
    "status": "inactive",
    "createdAt": "2025-08-25T11:32:00.397Z",
    "updatedAt": "2025-08-25T11:32:00.397Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "qLVwvsZGpIOSBNYu",
    "name": "Extending Meeting Time",
    "active": true,
    "workflowData": {
      "createdAt": "2025-08-19T13:08:11.973Z",
      "updatedAt": "2025-08-25T09:53:36.000Z",
      "id": "qLVwvsZGpIOSBNYu",
      "name": "Extending Meeting Time",
      "active": true,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            2240,
            608
          ],
          "id": "5849d4db-9fb3-435a-8072-7d0c5a1e6108",
          "name": "Split into batches"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.noOp",
          "name": "Replace Me",
          "typeVersion": 1,
          "position": [
            2464,
            656
          ],
          "id": "e10ad020-1122-4363-9e9b-044425e6e9ef"
        },
        {
          "parameters": {
            "jsCode": "// This script is designed for the 'busy_slots' workflow.\n// It takes the single new busy slot and finds ALL interviews that conflict with it.\n\n// 1. Get the new busy slot from the first node in our workflow.\nconst busySlotItem = $('Get Last Busy Slot').first();\nif (!busySlotItem) {\n  throw new Error(\"No document found in busy_slots collection.\");\n}\nconst busySlot = busySlotItem.json;\nconst busySlotStart = new Date(busySlot.startTime);\nconst busySlotEnd = new Date(busySlot.endTime);\n\n// 2. Get the complete list of all future interviews.\nconst allInterviews = $('Standardize Interview Data').all();\n\n// 3. Filter this list to find every interview that overlaps with the new busy slot.\nconst conflictingInterviews = allInterviews.filter(interviewItem => {\n  const interview = interviewItem.json;\n  \n  if (!interview.startTimeISO || !interview.endTimeISO) {\n    return false;\n  }\n  \n  const interviewStart = new Date(interview.startTimeISO);\n  const interviewEnd = new Date(interview.endTimeISO);\n\n  // Standard overlap check: (StartA < EndB) and (StartB < EndA)\n  return (interviewStart < busySlotEnd) && (busySlotStart < interviewEnd);\n});\n\n// 4. Return the complete list of all conflicting interviews.\n// If this list is empty, the workflow will correctly stop.\nreturn conflictingInterviews;\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            0,
            224
          ],
          "id": "0d4ee7aa-979a-4732-9b12-10cbfb68d923",
          "name": "Find All Conflicting Interviews"
        },
        {
          "parameters": {
            "collection": "unavailable_slots",
            "options": {},
            "query": "={\n  \"userId\": \"{{ $('Webhook').item.json.body.userId }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            1792,
            608
          ],
          "id": "5a633328-c79b-40c7-969d-3d7d6e76d06f",
          "name": "Get All Unavailable Slots",
          "alwaysOutputData": true,
          "executeOnce": false,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "collection": "candidates",
            "options": {},
            "query": "={\n  \"Interview Start\": {\n    \"$gte\": \"{{ $now.toISO() }}\"\n  },\n  \"userId\": \"{{ $('Webhook').item.json.body.userId }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            1120,
            608
          ],
          "id": "e0d69b6c-d532-44fc-a67e-76684952360b",
          "name": "Get All Future Interviews",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// This is the corrected version of the reliable \"end of the queue\" script.\n// It fixes the bug that caused one-hour slots and skipping of available times.\n\n// =============================================================================\n// HELPER FUNCTIONS\n// =============================================================================\n// (All your helper functions are correct and should remain here)\n\nfunction formatToReadableTime(date) {\n    if (!date) return 'Invalid Date';\n    return date.toLocaleTimeString('en-US', {\n        timeZone: 'Asia/Karachi',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n    });\n}\n\nfunction formatToReadableDate(date) {\n    if (!date) return 'Invalid Date';\n    return date.toLocaleDateString('en-US', {\n        timeZone: 'Asia/Karachi',\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n}\n\nfunction formatToISOString(date) {\n    if (!date) return null;\n    const pktDate = new Date(date.toLocaleString(\"en-US\", { timeZone: \"Asia/Karachi\" }));\n    const year = pktDate.getFullYear();\n    const month = String(pktDate.getMonth() + 1).padStart(2, '0');\n    const day = String(pktDate.getDate()).padStart(2, '0');\n    const hours = String(pktDate.getHours()).padStart(2, '0');\n    const minutes = String(pktDate.getMinutes()).padStart(2, '0');\n    const seconds = String(pktDate.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.000+05:00`;\n}\n\nfunction isValidBusinessTime(dateTime) {\n    if (!dateTime || !(dateTime instanceof Date) || isNaN(dateTime)) {\n        return false;\n    }\n    const pktDay = dateTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n    if (pktDay === 'Sat' || pktDay === 'Sun') {\n        return false;\n    }\n    const pktHour = parseInt(dateTime.toLocaleTimeString('en-US', { timeZone: 'Asia/Karachi', hour12: false, hour: '2-digit' }));\n    if (pktHour < 10 || pktHour >= 16) {\n        return false;\n    }\n    return true;\n}\n\nfunction moveToNextBusinessDay(currentTime) {\n    let nextDay = new Date(currentTime);\n    nextDay.setUTCDate(nextDay.getUTCDate() + 1);\n    const dayOfWeek = nextDay.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n    if (dayOfWeek === 'Sat') {\n        nextDay.setUTCDate(nextDay.getUTCDate() + 2); // Move to Monday\n    } else if (dayOfWeek === 'Sun') {\n        nextDay.setUTCDate(nextDay.getUTCDate() + 1); // Move to Monday\n    }\n    // Set to 10:00 AM Pakistan time (which is 5:00 AM UTC)\n    nextDay.setUTCHours(5, 0, 0, 0);\n    return nextDay;\n}\n\n\n// =============================================================================\n// MAIN LOGIC\n// =============================================================================\n\n// 1. Get all existing conflicts from the nodes that run before this one.\nconst calendarEvents = $('Get many events1').all().map(item => ({ startDateTime: new Date(item.json.start.dateTime), endDateTime: new Date(item.json.end.dateTime) }));\nconst unavailableSlots = $('Get All Unavailable Slots').all().map(item => ({ startDateTime: new Date(item.json.startTime), endDateTime: new Date(item.json.endTime) }));\nconst allInterviews = $('Standardize Interview Data').all().map(item => ({ startDateTime: new Date(item.json.startTimeISO), endDateTime: new Date(item.json.endTimeISO) }));\n\nconst allScheduledSlots = [...calendarEvents, ...unavailableSlots, ...allInterviews];\n\n// 2. Find the very last moment anything is scheduled to determine the \"end of the queue\".\nlet lastEndTime = new Date(); // Start with the current time as a baseline\nallScheduledSlots.forEach(slot => {\n    if (slot.endDateTime && !isNaN(slot.endDateTime.getTime()) && slot.endDateTime > lastEndTime) {\n        lastEndTime = slot.endDateTime;\n    }\n});\n\n// 3. The search for a new slot will start from this last known time.\nlet searchTime = new Date(lastEndTime);\n\n// 4. Start searching for the next available 30-minute slot.\nlet attemptCount = 0;\nfor (let i = 0; i < 2000; i++) {\n    attemptCount++;\n\n    // ** THIS IS THE FIX **\n    // First, round up to the next 30-minute mark. This ensures we start on a clean boundary.\n    const currentMinutes = searchTime.getMinutes();\n    if (currentMinutes % 30 !== 0) {\n        const minutesToAdd = 30 - (currentMinutes % 30);\n        searchTime = new Date(searchTime.getTime() + minutesToAdd * 60000);\n    }\n    searchTime.setSeconds(0, 0);\n    \n    // Now, check if this clean time is valid.\n    if (!isValidBusinessTime(searchTime)) {\n        searchTime = moveToNextBusinessDay(searchTime);\n        continue;\n    }\n\n    const proposedEnd = new Date(searchTime.getTime() + 30 * 60000);\n\n    if (!isValidBusinessTime(new Date(proposedEnd.getTime() - 1000))) {\n        searchTime = moveToNextBusinessDay(searchTime);\n        continue;\n    }\n\n    // Check for conflicts with ALL existing events.\n    const hasConflict = allScheduledSlots.some(slot =>\n        slot.startDateTime && !isNaN(slot.startDateTime.getTime()) &&\n        slot.endDateTime && !isNaN(slot.endDateTime.getTime()) &&\n        (searchTime < slot.endDateTime) && (slot.startDateTime < proposedEnd)\n    );\n\n    // If no conflict is found, we have our slot!\n    if (!hasConflict) {\n        const conflictingInterview = $input.first().json;\n        \n        return [{\n            json: {\n                ...conflictingInterview,\n                newStartTimeISO: formatToISOString(searchTime),\n                newEndTimeISO: formatToISOString(proposedEnd),\n                newDateReadable: formatToReadableDate(searchTime),\n                newTimeReadable: formatToReadableTime(searchTime),\n                oldDateReadable: formatToReadableDate(new Date(conflictingInterview.startTimeISO)),\n                oldTimeReadable: formatToReadableTime(new Date(conflictingInterview.startTimeISO)),\n            }\n        }];\n    }\n    \n    // ** THIS IS THE FIX **\n    // If a conflict was found, THEN we advance the time by 30 minutes for the next loop.\n    searchTime = new Date(searchTime.getTime() + 30 * 60000);\n}\n\nthrow new Error(`Could not find a reschedule slot within ${attemptCount} attempts.`);\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            2464,
            464
          ],
          "id": "968c0f2c-6a9c-411a-997d-78803462006c",
          "name": "Find Next Available Slot (Reschedule)"
        },
        {
          "parameters": {
            "jsCode": "// This node reads the data from your MongoDB collection and\n// creates the 'startTimeISO' and 'endTimeISO' fields that the\n// rest of the workflow needs.\n\nconst items = $input.all();\n\n// Loop through each interview record fetched from the database.\nconst standardizedItems = items.map(item => {\n  const interview = item.json;\n\n  // Create the new, standardized fields from your existing ones.\n  const standardizedInterview = {\n    ...interview, // Keep all the original data\n    startTimeISO: interview['Interview Start'], // Create 'startTimeISO' from 'Interview Start'\n    endTimeISO: interview['Interview End']      // Create 'endTimeISO' from 'Interview End'\n  };\n\n  return {\n    json: standardizedInterview\n  };\n});\n\n// Return the corrected items for the next node to use.\nreturn standardizedItems;\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1344,
            608
          ],
          "id": "3c794204-f7bc-4916-94df-e7fe8e1b549a",
          "name": "Standardize Interview Data"
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "93244220-00d2-4dcc-ae0a-3c86dbd5d605",
                  "name": "Interview Start",
                  "value": "={{ $json.start.dateTime }}",
                  "type": "string"
                },
                {
                  "id": "982e12bc-dfec-4d3d-856e-7711aa082c86",
                  "name": "Interview End",
                  "value": "={{ $json.end.dateTime }}",
                  "type": "string"
                },
                {
                  "id": "73bfd6e1-effc-4849-97b1-239551c34c4a",
                  "name": "status",
                  "value": "\"Rescheduled - Extension\"",
                  "type": "string"
                },
                {
                  "id": "afc0fd8a-0ed2-497e-959a-4d0d8d40f771",
                  "name": "Calendar Event ID",
                  "value": "={{ $('Find Next Available Slot (Reschedule)').item.json['Calendar Event ID'] }}",
                  "type": "string"
                },
                {
                  "id": "9625d313-b78d-48fa-8b58-9b8f0634baff",
                  "name": "_id",
                  "value": "={{ $('Find Next Available Slot (Reschedule)').item.json._id }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2912,
            464
          ],
          "id": "d1bc44c8-5508-451e-a33b-d86850262cda",
          "name": "Prepare Update Fields"
        },
        {
          "parameters": {
            "operation": "update",
            "collection": "candidates",
            "updateKey": "_id",
            "fields": "Interview Start, Interview End, status",
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            3136,
            464
          ],
          "id": "9bea084c-0128-4047-a2b3-2a1013e50489",
          "name": "Update Candidate Record",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "operation": "update",
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "eventId": "={{ $json[\"Calendar Event ID\"] }}",
            "updateFields": {
              "end": "={{ $json.newEndTimeISO }}",
              "start": "={{ $json.newStartTimeISO }}"
            }
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            2688,
            464
          ],
          "id": "404c8b8e-142c-48db-ae86-36551a51d8f4",
          "name": "Update Event",
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "getAll",
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "timeMax": "={{ $now.plus({ month: 1 }) }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            1568,
            608
          ],
          "id": "45f1589e-f8fb-4b34-882c-e76a49286a34",
          "name": "Get many events1",
          "alwaysOutputData": true,
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "sendTo": "={{ $('Find Next Available Slot (Reschedule)').item.json.Email }}",
            "subject": "Important Update: Your Interview with Ideofuzion has been Rescheduled",
            "message": "=<div style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n  <p>Dear <strong>{{ $('Find Next Available Slot (Reschedule)').item.json['Candidate Name'] }}</strong>,</p>\n  <p>We are writing to inform you of a slight delay regarding your upcoming interview for the <strong>{{ $('Find Next Available Slot (Reschedule)').item.json['Job Title'] }}</strong> position. The preceding interview has run longer than expected, and to ensure your discussion receives the full, dedicated time it deserves, we have had to shift your start time.</p>\n  <p>We sincerely apologize for this last-minute change and any inconvenience it may cause. Your new interview details are below:</p>\n  \n  <table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\n    <tr style=\"border-bottom: 1px solid #ddd;\">\n      <td style=\"padding: 8px; text-align: left;\"><strong>Original Time:</strong></td>\n      <td style=\"padding: 8px; text-align: left;\">{{ $('Find Next Available Slot (Reschedule)').item.json.oldDateReadable }}, at {{ $('Find Next Available Slot (Reschedule)').item.json.oldTimeReadable }} PKT</td>\n    </tr>\n    <tr style=\"background-color: #e8f0fe;\">\n      <td style=\"padding: 8px; text-align: left;\"><strong>New Time:</strong></td>\n      <td style=\"padding: 8px; text-align: left;\"><strong>{{ $('Find Next Available Slot (Reschedule)').item.json.newDateReadable }}, at {{ $('Find Next Available Slot (Reschedule)').item.json.newTimeReadable }} PKT</strong></td>\n    </tr>\n  </table>\n\n  <p>An updated calendar invitation reflecting this new time has been sent to your email. Please accept it to confirm.</p>\n  <p>Thank you for your understanding. We are looking forward to our conversation.</p>\n  <p>\n    Best regards,<br>\n    <strong>The HR Team</strong><br>\n    Ideofuzion\n  </p>\n</div>\n",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            3360,
            464
          ],
          "id": "7fe0b161-42be-4b51-994d-b64ba4436f82",
          "name": "Email to Candidate1",
          "webhookId": "d0ce039a-3a82-4b4c-8f54-65a6a007488f",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.manualTrigger",
          "typeVersion": 1,
          "position": [
            0,
            880
          ],
          "id": "d8a02a93-4766-4e1e-a62f-9f458741d8f6",
          "name": "When clicking ‘Execute workflow’"
        },
        {
          "parameters": {
            "collection": "extended_meetings",
            "options": {},
            "query": "={\n  \"userId\": \"{{ $('Webhook').item.json.body.userId }}\",\n  \"calendarEventId\": \"{{ $('Webhook').item.json.body.calendarEventId }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            896,
            608
          ],
          "id": "d75c6e71-ca83-4426-baa2-21f81c57c57e",
          "name": "Get Last Extended Meeting",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// This script finds the one interview immediately affected by an extension.\n\n// 1. Get the data from the node that fetched the latest extended meeting.\nconst extensionRequest = $('Get Last Extended Meeting').first().json;\n\nif (!extensionRequest) {\n  throw new Error(\"No document found in extended_meetings collection.\");\n}\n\n// MODIFICATION: Get the candidate ID of the extended meeting\nconst extendedMeetingCandidateId = extensionRequest.candidateId; \nconst newEndTime = new Date(extensionRequest.newEndTime);\n\n// 2. Get all future interviews that have been standardized.\nconst allInterviews = $('Standardize Interview Data').all();\n\n// 3. Find the single interview that starts before the new end time of the extended one.\n//    We sort by start time to ensure we find the very next one in the schedule.\nconst conflictingInterview = allInterviews\n  .map(item => item.json)\n  .sort((a, b) => new Date(a.startTimeISO) - new Date(b.startTimeISO))\n  .find(interview => {\n    if (!interview.startTimeISO) return false;\n    const interviewStart = new Date(interview.startTimeISO);\n    \n    // MODIFICATION: Compare the MongoDB _id instead of the Calendar Event ID\n    return (interviewStart < newEndTime) && (interview._id !== extendedMeetingCandidateId);\n  });\n\n// 4. If a conflict is found, return its data for rescheduling.\nif (conflictingInterview) {\n  return [{\n      json: conflictingInterview\n  }];\n}\n\n// Return an empty item to stop the workflow if no subsequent interview is affected.\nreturn [];"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            2016,
            608
          ],
          "id": "58a9ec14-8437-4fc3-89aa-9a7321fae3fb",
          "name": "Find Immediately Conflicting Interview"
        },
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "Extendmeeting-ideofuzion",
            "options": {}
          },
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 2,
          "position": [
            400,
            608
          ],
          "id": "bb9f7314-b46f-4a26-998c-8838391b8812",
          "name": "Webhook",
          "webhookId": "4b63beb1-c7d1-4118-8bbb-3a2252298a1d"
        }
      ],
      "connections": {
        "Split into batches": {
          "main": [
            [
              {
                "node": "Replace Me",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Find Next Available Slot (Reschedule)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get All Unavailable Slots": {
          "main": [
            [
              {
                "node": "Find Immediately Conflicting Interview",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get All Future Interviews": {
          "main": [
            [
              {
                "node": "Standardize Interview Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find Next Available Slot (Reschedule)": {
          "main": [
            [
              {
                "node": "Update Event",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Standardize Interview Data": {
          "main": [
            [
              {
                "node": "Get many events1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Update Fields": {
          "main": [
            [
              {
                "node": "Update Candidate Record",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Candidate Record": {
          "main": [
            [
              {
                "node": "Email to Candidate1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Event": {
          "main": [
            [
              {
                "node": "Prepare Update Fields",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get many events1": {
          "main": [
            [
              {
                "node": "Get All Unavailable Slots",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Last Extended Meeting": {
          "main": [
            [
              {
                "node": "Get All Future Interviews",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find Immediately Conflicting Interview": {
          "main": [
            [
              {
                "node": "Split into batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook": {
          "main": [
            [
              {
                "node": "Get Last Extended Meeting",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {
        "Webhook": [
          {
            "json": {
              "headers": {
                "host": "n8n.hireninja.site",
                "x-real-ip": "35.209.122.222",
                "x-forwarded-for": "35.209.122.222",
                "x-forwarded-host": "n8n.hireninja.site",
                "x-forwarded-proto": "https",
                "x-forwarded-ssl": "on",
                "x-forwarded-port": "443",
                "x-original-uri": "/webhook/Extendmeeting-ideofuzion",
                "content-length": "494",
                "content-type": "application/json",
                "user-agent": "HiringPlatform/1.0",
                "accept": "*/*",
                "accept-language": "*",
                "sec-fetch-mode": "cors",
                "accept-encoding": "br, gzip, deflate"
              },
              "params": {},
              "query": {},
              "body": {
                "userId": "68a81eb5e720f8cd707d6ad2",
                "userEmail": "maxpace94@gmail.com",
                "userName": "max gared",
                "candidateId": "68a82abe6a926f122805613c",
                "candidateName": "Arhum Sheikh",
                "candidateEmail": "aestheticedits980@gmail.com",
                "jobTitle": "Frontend Developer",
                "calendarEventId": "i6f9vqjs5sench967ck5ssehjk",
                "originalEndTime": "2025-08-22T19:00:00.000+05:00",
                "newEndTime": "2025-08-22T19:30:00.000+05:00",
                "reason": "long",
                "timestamp": "2025-08-22T13:50:13.807Z",
                "action": "meeting_extended",
                "platform": "ideofuzion"
              },
              "webhookUrl": "https://n8n.hireninja.site/webhook/Extendmeeting-ideofuzion",
              "executionMode": "production"
            }
          }
        ]
      },
      "versionId": "3e220d63-7b40-4139-a567-f12bc425ffef",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-08-19T13:08:11.979Z",
          "updatedAt": "2025-08-19T13:08:11.979Z",
          "role": "workflow:owner",
          "workflowId": "qLVwvsZGpIOSBNYu",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "3e220d63-7b40-4139-a567-f12bc425ffef",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:32:00.706Z",
      "updatedAt": "2025-08-25T11:32:00.706Z"
    },
    "status": "active",
    "createdAt": "2025-08-25T11:32:00.706Z",
    "updatedAt": "2025-08-25T11:32:00.706Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "w7k9ejgAD16tskZl",
    "name": "Busy Slots Working",
    "active": true,
    "workflowData": {
      "createdAt": "2025-08-19T13:08:31.451Z",
      "updatedAt": "2025-08-25T09:53:22.000Z",
      "id": "w7k9ejgAD16tskZl",
      "name": "Busy Slots Working",
      "active": true,
      "isArchived": false,
      "nodes": [
        {
          "parameters": {},
          "type": "n8n-nodes-base.manualTrigger",
          "typeVersion": 1,
          "position": [
            0,
            0
          ],
          "id": "c383d976-db7c-4690-b4eb-067c5a65104b",
          "name": "When clicking ‘Execute workflow’"
        },
        {
          "parameters": {
            "sendTo": "={{ $('Find Next Available Slot (Reschedule)').item.json.Email }}",
            "subject": "Important Update: Your Interview with Ideofuzion has been Rescheduled",
            "message": "=<div style=\"font-family: Arial, sans-serif; line-height: 1.6; color: #333;\">\n  <p>Dear <strong>{{ $('Find Next Available Slot (Reschedule)').item.json['Candidate Name'] }}</strong>,</p>\n  <p>Please note that your upcoming interview for the <strong>{{ $('Find Next Available Slot (Reschedule)').item.json['Job Title'] }}</strong> position has been rescheduled due to an unforeseen change in the interviewer's availability.</p>\n  <p>We apologize for any inconvenience this may cause. Your new interview details are as follows:</p>\n  \n  <table style=\"width: 100%; border-collapse: collapse; margin: 20px 0;\">\n    <tr style=\"border-bottom: 1px solid #ddd;\">\n      <td style=\"padding: 8px; text-align: left;\"><strong>Original Time:</strong></td>\n      <td style=\"padding: 8px; text-align: left;\">{{ $('Find Next Available Slot (Reschedule)').item.json.oldDateReadable }}, at {{ $('Find Next Available Slot (Reschedule)').item.json.oldTimeReadable }} PKT</td>\n    </tr>\n    <tr style=\"background-color: #e8f0fe;\">\n      <td style=\"padding: 8px; text-align: left;\"><strong>New Time:</strong></td>\n      <td style=\"padding: 8px; text-align: left;\"><strong>{{ $('Find Next Available Slot (Reschedule)').item.json.newDateReadable }}, at {{ $('Find Next Available Slot (Reschedule)').item.json.newTimeReadable }} PKT</strong></td>\n    </tr>\n  </table>\n\n  <p>An updated calendar invitation has been sent to your email. Please accept the new invitation to confirm the updated time.</p>\n  <p>We appreciate your flexibility and look forward to speaking with you.</p>\n  <p>\n    Best regards,<br>\n    <strong>The HR Team</strong><br>\n    Ideofuzion\n  </p>\n</div>\n",
            "options": {}
          },
          "type": "n8n-nodes-base.gmail",
          "typeVersion": 2.1,
          "position": [
            2688,
            384
          ],
          "id": "12437979-f0ad-4571-8b86-09ae934c1f2e",
          "name": "Email to Candidate1",
          "webhookId": "d0ce039a-3a82-4b4c-8f54-65a6a007488f",
          "credentials": {
            "gmailOAuth2": {
              "id": "9tI5tKl8dpmBDjV0",
              "name": "Gmail - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "getAll",
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "timeMax": "={{ $now.plus({ month: 1 }) }}",
            "options": {}
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            896,
            368
          ],
          "id": "3d127fce-fa97-49ff-aa73-ababb2681971",
          "name": "Get many events1",
          "alwaysOutputData": true,
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          },
          "onError": "continueRegularOutput"
        },
        {
          "parameters": {
            "operation": "update",
            "calendar": {
              "__rl": true,
              "value": "maxpace94@gmail.com",
              "mode": "list",
              "cachedResultName": "maxpace94@gmail.com"
            },
            "eventId": "={{ $json[\"Calendar Event ID\"] }}",
            "updateFields": {
              "end": "={{ $json.newEndTimeISO }}",
              "start": "={{ $json.newStartTimeISO }}"
            }
          },
          "type": "n8n-nodes-base.googleCalendar",
          "typeVersion": 1.3,
          "position": [
            2016,
            224
          ],
          "id": "02d38528-7df6-41af-a1ba-5dcc13b49f72",
          "name": "Update Event",
          "credentials": {
            "googleCalendarOAuth2Api": {
              "id": "TwyEij61n5ehN9wQ",
              "name": "Google Calendar - maxpace94@gmail.com"
            }
          }
        },
        {
          "parameters": {
            "operation": "update",
            "collection": "candidates",
            "updateKey": "_id",
            "fields": "Interview Start, Interview End, status",
            "options": {}
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            2464,
            224
          ],
          "id": "e61129a1-6f6e-4171-a90e-8cc5485e1423",
          "name": "Update Candidate Record",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "assignments": {
              "assignments": [
                {
                  "id": "93244220-00d2-4dcc-ae0a-3c86dbd5d605",
                  "name": "Interview Start",
                  "value": "={{ $json.start.dateTime }}",
                  "type": "string"
                },
                {
                  "id": "982e12bc-dfec-4d3d-856e-7711aa082c86",
                  "name": "Interview End",
                  "value": "={{ $json.end.dateTime }}",
                  "type": "string"
                },
                {
                  "id": "73bfd6e1-effc-4849-97b1-239551c34c4a",
                  "name": "status",
                  "value": "Rescheduled - Unavailability",
                  "type": "string"
                },
                {
                  "id": "afc0fd8a-0ed2-497e-959a-4d0d8d40f771",
                  "name": "Calendar Event ID",
                  "value": "={{ $('Find Next Available Slot (Reschedule)').item.json['Calendar Event ID'] }}",
                  "type": "string"
                },
                {
                  "id": "9625d313-b78d-48fa-8b58-9b8f0634baff",
                  "name": "_id",
                  "value": "={{ $('Find Next Available Slot (Reschedule)').item.json._id }}",
                  "type": "string"
                }
              ]
            },
            "options": {}
          },
          "type": "n8n-nodes-base.set",
          "typeVersion": 3.4,
          "position": [
            2240,
            224
          ],
          "id": "0052051b-29c1-4eb1-9b0e-c0b6a2119261",
          "name": "Prepare Update Fields"
        },
        {
          "parameters": {
            "jsCode": "// This node reads the data from your MongoDB collection and\n// creates the 'startTimeISO' and 'endTimeISO' fields that the\n// rest of the workflow needs.\n\nconst items = $input.all();\n\n// Loop through each interview record fetched from the database.\nconst standardizedItems = items.map(item => {\n  const interview = item.json;\n\n  // Create the new, standardized fields from your existing ones.\n  const standardizedInterview = {\n    ...interview, // Keep all the original data\n    startTimeISO: interview['Interview Start'], // Create 'startTimeISO' from 'Interview Start'\n    endTimeISO: interview['Interview End']      // Create 'endTimeISO' from 'Interview End'\n  };\n\n  return {\n    json: standardizedInterview\n  };\n});\n\n// Return the corrected items for the next node to use.\nreturn standardizedItems;\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            672,
            368
          ],
          "id": "75fffbe6-0d4f-497d-92b2-09b8f57b1b61",
          "name": "Standardize Interview Data"
        },
        {
          "parameters": {
            "jsCode": "// This is the corrected version of the reliable \"end of the queue\" script.\n// It fixes the bug that caused one-hour slots and skipping of available times.\n\n// =============================================================================\n// HELPER FUNCTIONS\n// =============================================================================\n// (All your helper functions are correct and should remain here)\n\nfunction formatToReadableTime(date) {\n    if (!date) return 'Invalid Date';\n    return date.toLocaleTimeString('en-US', {\n        timeZone: 'Asia/Karachi',\n        hour: '2-digit',\n        minute: '2-digit',\n        hour12: true\n    });\n}\n\nfunction formatToReadableDate(date) {\n    if (!date) return 'Invalid Date';\n    return date.toLocaleDateString('en-US', {\n        timeZone: 'Asia/Karachi',\n        weekday: 'long',\n        year: 'numeric',\n        month: 'long',\n        day: 'numeric'\n    });\n}\n\nfunction formatToISOString(date) {\n    if (!date) return null;\n    const pktDate = new Date(date.toLocaleString(\"en-US\", { timeZone: \"Asia/Karachi\" }));\n    const year = pktDate.getFullYear();\n    const month = String(pktDate.getMonth() + 1).padStart(2, '0');\n    const day = String(pktDate.getDate()).padStart(2, '0');\n    const hours = String(pktDate.getHours()).padStart(2, '0');\n    const minutes = String(pktDate.getMinutes()).padStart(2, '0');\n    const seconds = String(pktDate.getSeconds()).padStart(2, '0');\n    return `${year}-${month}-${day}T${hours}:${minutes}:${seconds}.000+05:00`;\n}\n\nfunction isValidBusinessTime(dateTime) {\n    if (!dateTime || !(dateTime instanceof Date) || isNaN(dateTime)) {\n        return false;\n    }\n    const pktDay = dateTime.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n    if (pktDay === 'Sat' || pktDay === 'Sun') {\n        return false;\n    }\n    const pktHour = parseInt(dateTime.toLocaleTimeString('en-US', { timeZone: 'Asia/Karachi', hour12: false, hour: '2-digit' }));\n    if (pktHour < 10 || pktHour >= 16) {\n        return false;\n    }\n    return true;\n}\n\nfunction moveToNextBusinessDay(currentTime) {\n    let nextDay = new Date(currentTime);\n    nextDay.setUTCDate(nextDay.getUTCDate() + 1);\n    const dayOfWeek = nextDay.toLocaleDateString('en-US', { timeZone: 'Asia/Karachi', weekday: 'short' });\n    if (dayOfWeek === 'Sat') {\n        nextDay.setUTCDate(nextDay.getUTCDate() + 2); // Move to Monday\n    } else if (dayOfWeek === 'Sun') {\n        nextDay.setUTCDate(nextDay.getUTCDate() + 1); // Move to Monday\n    }\n    // Set to 10:00 AM Pakistan time (which is 5:00 AM UTC)\n    nextDay.setUTCHours(5, 0, 0, 0);\n    return nextDay;\n}\n\n\n// =============================================================================\n// MAIN LOGIC\n// =============================================================================\n\n// 1. Get all existing conflicts from the nodes that run before this one.\nconst calendarEvents = $('Get many events1').all().map(item => ({ startDateTime: new Date(item.json.start.dateTime), endDateTime: new Date(item.json.end.dateTime) }));\nconst unavailableSlots = $('Get All Unavailable Slots').all().map(item => ({ startDateTime: new Date(item.json.startTime), endDateTime: new Date(item.json.endTime) }));\nconst allInterviews = $('Standardize Interview Data').all().map(item => ({ startDateTime: new Date(item.json.startTimeISO), endDateTime: new Date(item.json.endTimeISO) }));\n\nconst allScheduledSlots = [...calendarEvents, ...unavailableSlots, ...allInterviews];\n\n// 2. Find the very last moment anything is scheduled to determine the \"end of the queue\".\nlet lastEndTime = new Date(); // Start with the current time as a baseline\nallScheduledSlots.forEach(slot => {\n    if (slot.endDateTime && !isNaN(slot.endDateTime.getTime()) && slot.endDateTime > lastEndTime) {\n        lastEndTime = slot.endDateTime;\n    }\n});\n\n// 3. The search for a new slot will start from this last known time.\nlet searchTime = new Date(lastEndTime);\n\n// 4. Start searching for the next available 30-minute slot.\nlet attemptCount = 0;\nfor (let i = 0; i < 2000; i++) {\n    attemptCount++;\n\n    // ** THIS IS THE FIX **\n    // First, round up to the next 30-minute mark. This ensures we start on a clean boundary.\n    const currentMinutes = searchTime.getMinutes();\n    if (currentMinutes % 30 !== 0) {\n        const minutesToAdd = 30 - (currentMinutes % 30);\n        searchTime = new Date(searchTime.getTime() + minutesToAdd * 60000);\n    }\n    searchTime.setSeconds(0, 0);\n    \n    // Now, check if this clean time is valid.\n    if (!isValidBusinessTime(searchTime)) {\n        searchTime = moveToNextBusinessDay(searchTime);\n        continue;\n    }\n\n    const proposedEnd = new Date(searchTime.getTime() + 30 * 60000);\n\n    if (!isValidBusinessTime(new Date(proposedEnd.getTime() - 1000))) {\n        searchTime = moveToNextBusinessDay(searchTime);\n        continue;\n    }\n\n    // Check for conflicts with ALL existing events.\n    const hasConflict = allScheduledSlots.some(slot =>\n        slot.startDateTime && !isNaN(slot.startDateTime.getTime()) &&\n        slot.endDateTime && !isNaN(slot.endDateTime.getTime()) &&\n        (searchTime < slot.endDateTime) && (slot.startDateTime < proposedEnd)\n    );\n\n    // If no conflict is found, we have our slot!\n    if (!hasConflict) {\n        const conflictingInterview = $input.first().json;\n        \n        return [{\n            json: {\n                ...conflictingInterview,\n                newStartTimeISO: formatToISOString(searchTime),\n                newEndTimeISO: formatToISOString(proposedEnd),\n                newDateReadable: formatToReadableDate(searchTime),\n                newTimeReadable: formatToReadableTime(searchTime),\n                oldDateReadable: formatToReadableDate(new Date(conflictingInterview.startTimeISO)),\n                oldTimeReadable: formatToReadableTime(new Date(conflictingInterview.startTimeISO)),\n            }\n        }];\n    }\n    \n    // ** THIS IS THE FIX **\n    // If a conflict was found, THEN we advance the time by 30 minutes for the next loop.\n    searchTime = new Date(searchTime.getTime() + 30 * 60000);\n}\n\nthrow new Error(`Could not find a reschedule slot within ${attemptCount} attempts.`);\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1792,
            224
          ],
          "id": "e8bb7854-58d4-4de8-9619-5c2e3b3be106",
          "name": "Find Next Available Slot (Reschedule)"
        },
        {
          "parameters": {
            "collection": "busy_slots",
            "options": {},
            "query": "={\n  \"_id\": \"{{ $('Webhook').item.json.body.slotId }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            224,
            480
          ],
          "id": "fff16bf6-2fb2-4b8c-bf1a-396fa8cdb0ae",
          "name": "Get Last Busy Slot",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "collection": "candidates",
            "options": {},
            "query": "={\n  \"Interview Start\": {\n    \"$gte\": \"{{ $now.toISO() }}\"\n  },\n  \"userId\": \"{{ $('Webhook').item.json.body.userId }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            448,
            368
          ],
          "id": "0a891c53-f019-41b1-a451-2ff41ebeab17",
          "name": "Get All Future Interviews",
          "alwaysOutputData": true,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "collection": "unavailable_slots",
            "options": {},
            "query": "={\n  \"userId\": \"{{ $('Webhook').item.json.body.userId }}\"\n}"
          },
          "type": "n8n-nodes-base.mongoDb",
          "typeVersion": 1.2,
          "position": [
            1120,
            368
          ],
          "id": "ebee507a-945a-4251-b82b-15c94e1432a6",
          "name": "Get All Unavailable Slots",
          "alwaysOutputData": true,
          "executeOnce": false,
          "credentials": {
            "mongoDb": {
              "id": "czLWond9VcLqtcLi",
              "name": "Database Account"
            }
          }
        },
        {
          "parameters": {
            "jsCode": "// This script is designed for the 'busy_slots' workflow.\n// It takes the single new busy slot and finds ALL interviews that conflict with it.\n\n// 1. Get the new busy slot from the first node in our workflow.\nconst busySlotItem = $('Get Last Busy Slot').first();\nif (!busySlotItem) {\n  throw new Error(\"No document found in busy_slots collection.\");\n}\nconst busySlot = busySlotItem.json;\nconst busySlotStart = new Date(busySlot.startTime);\nconst busySlotEnd = new Date(busySlot.endTime);\n\n// 2. Get the complete list of all future interviews.\nconst allInterviews = $('Standardize Interview Data').all();\n\n// 3. Filter this list to find every interview that overlaps with the new busy slot.\nconst conflictingInterviews = allInterviews.filter(interviewItem => {\n  const interview = interviewItem.json;\n  \n  if (!interview.startTimeISO || !interview.endTimeISO) {\n    return false;\n  }\n  \n  const interviewStart = new Date(interview.startTimeISO);\n  const interviewEnd = new Date(interview.endTimeISO);\n\n  // Standard overlap check: (StartA < EndB) and (StartB < EndA)\n  return (interviewStart < busySlotEnd) && (busySlotStart < interviewEnd);\n});\n\n// 4. Return the complete list of all conflicting interviews.\n// If this list is empty, the workflow will correctly stop.\nreturn conflictingInterviews;\n"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1344,
            368
          ],
          "id": "6d65b34b-a112-4633-9e19-0137bdc4f748",
          "name": "Find All Conflicting Interviews"
        },
        {
          "parameters": {},
          "type": "n8n-nodes-base.noOp",
          "name": "Replace Me",
          "typeVersion": 1,
          "position": [
            1792,
            416
          ],
          "id": "f8bcc084-c056-4f0c-a6f3-179cf9f64d1b"
        },
        {
          "parameters": {
            "options": {}
          },
          "type": "n8n-nodes-base.splitInBatches",
          "typeVersion": 3,
          "position": [
            1568,
            368
          ],
          "id": "521f781b-18c2-4b1a-9c63-750e5bf2387f",
          "name": "Split into batches"
        },
        {
          "parameters": {
            "httpMethod": "POST",
            "path": "busyslot-ideofuzion",
            "options": {}
          },
          "type": "n8n-nodes-base.webhook",
          "typeVersion": 2,
          "position": [
            0,
            480
          ],
          "id": "9ea2c949-9c8f-4437-8cc8-730db0c5b0c9",
          "name": "Webhook",
          "webhookId": "9f5e6fba-ac86-45fa-a435-d686a388ea56"
        }
      ],
      "connections": {
        "Get many events1": {
          "main": [
            [
              {
                "node": "Get All Unavailable Slots",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Event": {
          "main": [
            [
              {
                "node": "Prepare Update Fields",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Update Candidate Record": {
          "main": [
            [
              {
                "node": "Email to Candidate1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Prepare Update Fields": {
          "main": [
            [
              {
                "node": "Update Candidate Record",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Standardize Interview Data": {
          "main": [
            [
              {
                "node": "Get many events1",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find Next Available Slot (Reschedule)": {
          "main": [
            [
              {
                "node": "Update Event",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Last Busy Slot": {
          "main": [
            [
              {
                "node": "Get All Future Interviews",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get All Future Interviews": {
          "main": [
            [
              {
                "node": "Standardize Interview Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get All Unavailable Slots": {
          "main": [
            [
              {
                "node": "Find All Conflicting Interviews",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Find All Conflicting Interviews": {
          "main": [
            [
              {
                "node": "Split into batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Replace Me": {
          "main": [
            [
              {
                "node": "Split into batches",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Split into batches": {
          "main": [
            [
              {
                "node": "Replace Me",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Find Next Available Slot (Reschedule)",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Email to Candidate1": {
          "main": [
            [
              {
                "node": "Get Last Busy Slot",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Webhook": {
          "main": [
            [
              {
                "node": "Get Last Busy Slot",
                "type": "main",
                "index": 0
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {
        "Webhook": [
          {
            "json": {
              "headers": {
                "host": "n8n.hireninja.site",
                "x-real-ip": "35.209.122.222",
                "x-forwarded-for": "35.209.122.222",
                "x-forwarded-host": "n8n.hireninja.site",
                "x-forwarded-proto": "https",
                "x-forwarded-ssl": "on",
                "x-forwarded-port": "443",
                "x-original-uri": "/webhook/busyslot-ideofuzion",
                "content-length": "334",
                "content-type": "application/json",
                "user-agent": "HiringPlatform/1.0",
                "accept": "*/*",
                "accept-language": "*",
                "sec-fetch-mode": "cors",
                "accept-encoding": "br, gzip, deflate"
              },
              "params": {},
              "query": {},
              "body": {
                "userId": "68a81eb5e720f8cd707d6ad2",
                "userEmail": "maxpace94@gmail.com",
                "userName": "max gared",
                "slotId": "68a875f442600a0d7013b8d2",
                "date": "2025-08-22",
                "startTime": "2025-08-22T14:30:00.000Z",
                "endTime": "2025-08-22T15:00:00.000Z",
                "reason": "Busy",
                "timestamp": "2025-08-22T13:51:48.540Z",
                "action": "busy_slot_created",
                "platform": "ideofuzion"
              },
              "webhookUrl": "https://n8n.hireninja.site/webhook/busyslot-ideofuzion",
              "executionMode": "production"
            }
          }
        ]
      },
      "versionId": "baa76a9c-7002-4edb-9d9b-dfd16cfc9539",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-08-19T13:08:31.457Z",
          "updatedAt": "2025-08-19T13:08:31.457Z",
          "role": "workflow:owner",
          "workflowId": "w7k9ejgAD16tskZl",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "baa76a9c-7002-4edb-9d9b-dfd16cfc9539",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:32:01.014Z",
      "updatedAt": "2025-08-25T11:32:01.014Z"
    },
    "status": "active",
    "createdAt": "2025-08-25T11:32:01.014Z",
    "updatedAt": "2025-08-25T11:32:01.014Z"
  },
  {
    "userId": "test-user-123",
    "n8nId": "zdAfk6jqmDfErDfo",
    "name": "My workflow 2",
    "active": false,
    "workflowData": {
      "createdAt": "2025-08-24T15:09:28.075Z",
      "updatedAt": "2025-08-25T05:01:27.000Z",
      "id": "zdAfk6jqmDfErDfo",
      "name": "My workflow 2",
      "active": false,
      "isArchived": true,
      "nodes": [
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 1
              },
              "conditions": [
                {
                  "id": "0ded4d1d-2d3c-4d43-ad02-fc4589576442",
                  "leftValue": "={{ $json.message.text }}",
                  "rightValue": "",
                  "operator": {
                    "type": "string",
                    "operation": "notEmpty",
                    "singleValue": true
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [
            -416,
            144
          ],
          "id": "f3e7a024-9414-465e-a992-6ada7969eaef",
          "name": "Validate Input"
        },
        {
          "parameters": {
            "url": "=https://api.coingecko.com/api/v3/coins/{{ $json.coinGeckoId }}/market_chart",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "vs_currency",
                  "value": "usd"
                },
                {
                  "name": "days",
                  "value": "7"
                }
              ]
            },
            "options": {
              "timeout": 10000
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            384,
            -160
          ],
          "id": "63a1f87a-2af0-43e2-beb7-b766efc6540b",
          "name": "Get Price Data (CoinGecko)"
        },
        {
          "parameters": {
            "url": "=https://api.coingecko.com/api/v3/coins/{{ $json.coinGeckoId }}/market_chart",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "localization",
                  "value": "false"
                },
                {
                  "name": "tickers",
                  "value": "false"
                },
                {
                  "name": "market_data",
                  "value": "true"
                },
                {
                  "name": "community_data",
                  "value": "false"
                },
                {
                  "name": "developer_data",
                  "value": "false"
                }
              ]
            },
            "options": {
              "timeout": 10000
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            384,
            496
          ],
          "id": "7e60d846-578e-45c7-b6a8-df5bdc770a42",
          "name": "Get Coin Info (CoinGecko)"
        },
        {
          "parameters": {
            "mode": "combine",
            "combineBy": "combineByPosition",
            "numberInputs": 6,
            "options": {}
          },
          "type": "n8n-nodes-base.merge",
          "typeVersion": 3.2,
          "position": [
            608,
            48
          ],
          "id": "b2381b36-ecff-4252-8a24-25c1abfb75e3",
          "name": "Merge All Data"
        },
        {
          "parameters": {
            "aggregate": "aggregateAllItemData",
            "options": {}
          },
          "type": "n8n-nodes-base.aggregate",
          "typeVersion": 1,
          "position": [
            832,
            112
          ],
          "id": "ced55018-4a44-4453-99c1-ccc2fbbb2362",
          "name": "Aggregate Data",
          "disabled": true
        },
        {
          "parameters": {
            "jsCode": "// All data is merged into the top-level '$json' object\nconst data = $json;\n\ntry {\n    // Get metadata directly from the trigger\n    const triggerData = $('Telegram Trigger1').item.json.message;\n    const chatId = triggerData.chat.id;\n    const originalSymbol = triggerData.text;\n\n    // === VALIDATE REQUIRED DATA ===\n    if (!data.prices || !data.market_data) {\n        throw new Error(`Core market data for '${originalSymbol || 'unknown'}' not found on CoinGecko.`);\n    }\n    \n    // === PROCESS BYBIT FUTURES DATA (NEW) ===\n    // Bybit API nests its results in a 'result.list[0]' object.\n    const tickerData = data[0]?.result?.list?.[0] || {};\n    const fundingData = data[1]?.result?.list?.[0] || {};\n    const ratioData = data[2]?.result?.list?.[0] || {};\n\n    const openInterest = parseFloat(fundingData.openInterestValue) || null;\n    const fundingRate = parseFloat(fundingData.fundingRate) || null;\n    const longShortRatio = parseFloat(ratioData.buyRatio) || null;\n\n\n    // === PROCESS COINGECKO DATA ===\n    const prices = data.prices;\n    const currentPrice = parseFloat(tickerData.markPrice) || data.market_data.current_price.usd;\n    const priceChange24h = parseFloat(tickerData.price24hPcnt) * 100 || data.market_data.price_change_percentage_24h || 0;\n    \n    // === TECHNICAL ANALYSIS ===\n    function calculateSMA(priceArray, period) {\n        if (priceArray.length < period) return null;\n        const sum = priceArray.slice(-period).reduce((acc, curr) => acc + curr[1], 0);\n        return sum / period;\n    }\n\n    function calculateRSI(priceArray, period = 14) {\n        if (priceArray.length < period + 1) return null;\n        let gains = [], losses = [];\n        for (let i = 1; i < priceArray.length; i++) {\n            const change = priceArray[i][1] - priceArray[i-1][1];\n            gains.push(change > 0 ? change : 0);\n            losses.push(change < 0 ? Math.abs(change) : 0);\n        }\n        const avgGain = gains.slice(-period).reduce((a, b) => a + b, 0) / period;\n        const avgLoss = losses.slice(-period).reduce((a, b) => a + b, 0) / period;\n        if (avgLoss === 0) return 100;\n        const rs = avgGain / avgLoss;\n        return 100 - (100 / (1 + rs));\n    }\n    \n    function calculateVolatility(priceArray, period = 24) {\n        if (priceArray.length < period) return null;\n        const recentPrices = priceArray.slice(-period);\n        let totalChange = 0;\n        for (let i = 1; i < recentPrices.length; i++) {\n            const change = Math.abs((recentPrices[i][1] - recentPrices[i-1][1]) / recentPrices[i-1][1]);\n            totalChange += change;\n        }\n        return (totalChange / (period - 1)) * 100;\n    }\n\n    const sma20 = calculateSMA(prices, 20);\n    const sma50 = calculateSMA(prices, 50);\n    const rsi = calculateRSI(prices, 14);\n    const volatility = calculateVolatility(prices, 24);\n    const support = Math.min(...prices.slice(-20).map(p => p[1]));\n    const resistance = Math.max(...prices.slice(-20).map(p => p[1]));\n    \n    let trend = 'Neutral';\n    if (sma20 && sma50) {\n        if (currentPrice > sma20 && sma20 > sma50) trend = 'Bullish';\n        else if (currentPrice < sma20 && sma20 < sma50) trend = 'Bearish';\n    }\n\n    // === FINAL OUTPUT OBJECT ===\n    return [{\n        json: {\n            symbol: data.symbol.toUpperCase(),\n            name: data.name,\n            currentPrice: currentPrice,\n            priceChange24h: priceChange24h,\n            trend: trend,\n            rsi: rsi,\n            volatility: volatility,\n            support: support,\n            resistance: resistance,\n            openInterest: openInterest,\n            fundingRate: fundingRate,\n            longShortRatio: longShortRatio,\n            chatId: chatId,\n            originalSymbol: originalSymbol,\n        }\n    }];\n\n} catch (error) {\n    return [{\n        json: {\n            error: true,\n            errorMessage: error.message,\n            errorType: 'DATA_PROCESSING_ERROR',\n            symbol: $('Telegram Trigger1').item.json.message.text || 'unknown',\n            timestamp: new Date().toISOString(),\n            chatId: $('Telegram Trigger1').item.json.message.chat.id\n        }\n    }];\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            1056,
            112
          ],
          "id": "c36a73bb-b406-44a2-8885-dca83eafa87a",
          "name": "Process & Analyze Data"
        },
        {
          "parameters": {
            "conditions": {
              "options": {
                "caseSensitive": true,
                "leftValue": "",
                "typeValidation": "strict",
                "version": 1
              },
              "conditions": [
                {
                  "id": "65a203b2-c8ed-46c3-8477-a764eed57d06",
                  "leftValue": "={{ $json.error }}",
                  "rightValue": true,
                  "operator": {
                    "type": "boolean",
                    "operation": "notEquals"
                  }
                }
              ],
              "combinator": "and"
            },
            "options": {}
          },
          "type": "n8n-nodes-base.if",
          "typeVersion": 2,
          "position": [
            1280,
            112
          ],
          "id": "a5006407-a65d-494c-b246-1bef4e344b9a",
          "name": "Check for Errors"
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-5-nano",
              "mode": "list",
              "cachedResultName": "GPT-5-NANO"
            },
            "messages": {
              "values": [
                {
                  "content": "=You are a professional quantitative futures trader and risk manager. Your task is to create a detailed, actionable, and risk-managed trade plan based on the provided market data.\n\n## Market Data\n- Symbol: {{ $json.symbol }} ({{ $json.name }})\n- Current Price: ${{ $json.currentPrice }}\n- 24h Change: {{ $json.priceChange24h }}%\n\n## Technical Analysis\n- Trend: {{ $json.trend }}\n- RSI (14): {{ $json.rsi }}\n- Volatility: {{ $json.volatility }}%\n- Support Level: ${{ $json.support }}\n- Resistance Level: ${{ $json.resistance }}\n\n## Futures Market Sentiment\n- Open Interest: {{ FORMAT_AS_CURRENCY($json.openInterest) }}\n- Funding Rate: {{ $json.fundingRate * 100 }}%\n- Global Long/Short Ratio: {{ $json.longShortRatio }}\n\n---\n\n## RISK MANAGEMENT RULES:\n1.  **Leverage**: High volatility (>8%) or mixed signals = low leverage (3-5x). Low volatility (<4%) and strong trend confirmation = moderate leverage (8-15x). NEVER recommend above 20x.\n2.  **Position**:\n    * **LONG**: Strong bullish trend, RSI < 60, positive funding rate, and price near support.\n    * **SHORT**: Strong bearish trend, RSI > 40, negative funding rate, and price near resistance.\n    * **NO TRADE**: Conflicting signals, extreme RSI (<20 or >80), or extremely high volatility (>15%).\n3.  **Stop Loss (SL)**: Place SL 1-3% below entry for longs (just under support), or 1-3% above entry for shorts (just over resistance).\n4.  **Take Profit (TP)**: Define 2-3 TP levels at key resistance/support levels, aiming for at least a 1.5:1 reward-to-risk ratio for TP1.\n5.  **DCA**: If the trend is strong but the entry is not perfect, recommend 2-3 DCA (Dollar-Cost Averaging) entry points at lower support levels for a long, or higher resistance levels for a short.\n\n---\n\n## REQUIRED OUTPUT FORMAT:\n\n**🚨 FUTURES TRADE PLAN: {{ $json.symbol }}/USDT 🚨**\n\n**🔹 Position**: [LONG / SHORT / NO TRADE]\n**🔹 Leverage**: [X]x\n**🔹 Wallet Allocation**: [Y]%\n\n**📈 Entries:**\n* **Entry 1 (Market)**: ~$[$X.XX]\n* **DCA 2**: ~$[$X.XX]\n* **DCA 3**: ~$[$X.XX]\n*(Remove DCA points if not applicable)*\n\n**🛡️ Risk Management:**\n* **Stop Loss**: $[$X.XX] ([Z]% from first entry)\n* **Take Profit 1**: $[$X.XX]\n* **Take Profit 2**: $[$X.XX]\n* **Take Profit 3**: $[$X.XX]\n\n**💡 Rationale:**\n[Provide a 2-3 sentence analysis combining the technicals and futures sentiment to justify the trade plan. Example: \"The asset is in a clear bullish trend with a positive funding rate, but RSI is neutral. We recommend a primary entry now with DCA orders at lower support levels to manage risk.\"]\n\n**⚠️ Disclaimer**: This is not financial advice. Futures trading is extremely risky.",
                  "role": "system"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            1504,
            16
          ],
          "id": "2f982a39-21b8-479d-909e-37649233bd97",
          "name": "AI Trading Analysis",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "chatId": "={{ $json.chatId }}",
            "text": "❌ **Error Processing Request**\\n\\n**Symbol**: {{ $json.symbol }}\\n**Error**: {{ $json.errorMessage }}\\n\\n💡 **Suggestions**:\\n• Check the cryptocurrency symbol\\n• Try popular symbols like: BTC, ETH, ADA, DOT\\n• Use full names like: bitcoin, ethereum, cardano\\n\\nℹ️ **Supported formats**: BTC, bitcoin, ETH, ethereum, etc.",
            "additionalFields": {
              "parse_mode": "Markdown"
            }
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            1568,
            208
          ],
          "id": "6d1daf9a-7f2e-4b9b-b996-8526b1861392",
          "name": "Send Error Message",
          "webhookId": "6cd3f544-67da-4b70-a202-3f767b44d342",
          "credentials": {
            "telegramApi": {
              "id": "nHgveAmRJKZLNDie",
              "name": "telegram aPI"
            }
          }
        },
        {
          "parameters": {
            "chatId": "={{ $('Telegram Trigger1').item.json.message.chat.id }}",
            "text": "=={{ $json.message.content }}",
            "additionalFields": {
              "parse_mode": "MarkdownV2"
            }
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            1856,
            16
          ],
          "id": "fe063931-ca05-4bec-9329-6bee9fc902e8",
          "name": "Send Trading Analysis",
          "webhookId": "a254cdd4-f949-4484-8ef8-384a6d0991d2",
          "credentials": {
            "telegramApi": {
              "id": "nHgveAmRJKZLNDie",
              "name": "telegram aPI"
            }
          }
        },
        {
          "parameters": {
            "chatId": "={{ $json.message.chat.id }}",
            "text": "❌ **Invalid Input**\\n\\nPlease send a cryptocurrency symbol or name.\\n\\n✅ **Examples**:\\n• BTC or bitcoin\\n• ETH or ethereum\\n• ADA or cardano\\n• DOT or polkadot",
            "additionalFields": {
              "parse_mode": "Markdown"
            }
          },
          "type": "n8n-nodes-base.telegram",
          "typeVersion": 1.2,
          "position": [
            -128,
            240
          ],
          "id": "ca5ec44c-f7d1-4d66-be05-a616265eac03",
          "name": "Send Invalid Input Message",
          "webhookId": "796cf89f-3c46-4535-b396-87f2e09f79ea",
          "credentials": {
            "telegramApi": {
              "id": "nHgveAmRJKZLNDie",
              "name": "telegram aPI"
            }
          }
        },
        {
          "parameters": {
            "updates": "={{ [\"message\"] }}",
            "additionalFields": {}
          },
          "type": "n8n-nodes-base.telegramTrigger",
          "typeVersion": 1.2,
          "position": [
            -640,
            144
          ],
          "id": "4d4f56a6-664c-4330-92b0-122fc68e3904",
          "name": "Telegram Trigger1",
          "webhookId": "crypto-bot-webhook-001",
          "credentials": {
            "telegramApi": {
              "id": "nHgveAmRJKZLNDie",
              "name": "telegram aPI"
            }
          }
        },
        {
          "parameters": {
            "modelId": {
              "__rl": true,
              "value": "gpt-4.1-mini",
              "mode": "list",
              "cachedResultName": "GPT-4.1-MINI"
            },
            "messages": {
              "values": [
                {
                  "content": "=You are a crypto data parsing expert. Your task is to analyze the user's text and return a structured JSON object containing the base asset, quote asset, the CoinGecko ID for the base asset, and the standardized exchange symbol.\n\nRULES:\n- Always respond with only a valid JSON object.\n- If the user provides a trading pair (e.g., 'btcusdt', 'ETH/USDT'), identify the base and quote assets.\n- If the user provides only one coin name, assume the quote asset is 'usdt'.\n- For the `exchangeSymbol`, combine the base and quote assets in uppercase (e.g., 'BTCUSDT').\n- For the `coinGeckoId`, provide the official CoinGecko ID for the base asset.\n- If you are unsure or the input is ambiguous (e.g., 'Mat coin' could be multiple things), set the `error` field.\n\nEXAMPLES:\n- User input: \"btcusdt\"\n  { \"baseAsset\": \"btc\", \"quoteAsset\": \"usdt\", \"coinGeckoId\": \"bitcoin\", \"exchangeSymbol\": \"BTCUSDT\" }\n- User input: \"analyze ethereum\"\n  { \"baseAsset\": \"eth\", \"quoteAsset\": \"usdt\", \"coinGeckoId\": \"ethereum\", \"exchangeSymbol\": \"ETHUSDT\" }\n- User input: \"matic\"\n  { \"baseAsset\": \"matic\", \"quoteAsset\": \"usdt\", \"coinGeckoId\": \"polygon\", \"exchangeSymbol\": \"MATICUSDT\" }\n- User input: \"Mat coin\"\n  { \"error\": \"Ambiguous input. Could be 'Metacoin (MTC)' or another asset. Please be more specific.\" }\n\n---\nUser input: \"{{ $json.message.text }}\"",
                  "role": "assistant"
                }
              ]
            },
            "options": {}
          },
          "type": "@n8n/n8n-nodes-langchain.openAi",
          "typeVersion": 1.8,
          "position": [
            -192,
            48
          ],
          "id": "9fc26b34-a50b-4ef3-af6a-787b404e38bd",
          "name": "Message a model",
          "credentials": {
            "openAiApi": {
              "id": "9TB9UR9WXn9AhCai",
              "name": "Ideofuzion testing"
            }
          }
        },
        {
          "parameters": {
            "url": "https://api.bybit.com/v5/market/account-ratio",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "symbol",
                  "value": "={{ $('Parse LLM Response').item.json.exchangeSymbol }}"
                },
                {
                  "name": "period",
                  "value": "5min"
                },
                {
                  "name": "limit",
                  "value": "1"
                }
              ]
            },
            "options": {
              "proxy": "http://51.79.99.237:4502"
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            384,
            688
          ],
          "id": "1502efc9-7fd0-47e1-b4bd-4207e6830f2c",
          "name": "Get Long/Short Ratio"
        },
        {
          "parameters": {
            "jsCode": "const rawContent =$input.first().json.message.content;\n\n// Use a regular expression to find the JSON object within the string.\n// This will strip out any ```json formatting from the beginning and end.\nconst jsonMatch = rawContent.match(/{[\\s\\S]*}/);\n\nif (jsonMatch) {\n  // We found a match, so parse it.\n  const jsonString = jsonMatch[0];\n  const parsedData = JSON.parse(jsonString);\n  return parsedData;\n} else {\n  // If no JSON object is found, throw an error.\n  throw new Error(\"Could not find a valid JSON object in the LLM response.\");\n}"
          },
          "type": "n8n-nodes-base.code",
          "typeVersion": 2,
          "position": [
            144,
            -96
          ],
          "id": "ba90ba59-01f6-48a5-a3c8-6730af5439b5",
          "name": "Parse LLM Response"
        },
        {
          "parameters": {
            "url": "https://api.bybit.com/v5/market/tickers",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "symbol",
                  "value": "={{ $('Parse LLM Response').item.json.exchangeSymbol }}"
                },
                {
                  "name": "category",
                  "value": "linear"
                }
              ]
            },
            "options": {
              "proxy": "http://51.79.99.237:4502"
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            384,
            64
          ],
          "id": "3397ebef-1d0e-49fd-add8-2084b9af4f7e",
          "name": "Get Ticker Info"
        },
        {
          "parameters": {
            "url": "https://api.bybit.com/v5/market/funding/history",
            "sendQuery": true,
            "queryParameters": {
              "parameters": [
                {
                  "name": "symbol",
                  "value": "={{ $('Parse LLM Response').item.json.exchangeSymbol }}"
                },
                {
                  "name": "category",
                  "value": "linear"
                },
                {
                  "name": "limit",
                  "value": "1"
                }
              ]
            },
            "options": {
              "proxy": "http://51.79.99.237:4502"
            }
          },
          "type": "n8n-nodes-base.httpRequest",
          "typeVersion": 4.2,
          "position": [
            400,
            272
          ],
          "id": "903e575b-122d-40fc-82a2-51afb7020a90",
          "name": "Get Funding Rate & Open Interest"
        }
      ],
      "connections": {
        "Validate Input": {
          "main": [
            [
              {
                "node": "Message a model",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Invalid Input Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Price Data (CoinGecko)": {
          "main": [
            [
              {
                "node": "Merge All Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Coin Info (CoinGecko)": {
          "main": [
            [
              {
                "node": "Merge All Data",
                "type": "main",
                "index": 1
              }
            ]
          ]
        },
        "Merge All Data": {
          "main": [
            [
              {
                "node": "Aggregate Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Aggregate Data": {
          "main": [
            [
              {
                "node": "Process & Analyze Data",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Process & Analyze Data": {
          "main": [
            [
              {
                "node": "Check for Errors",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Check for Errors": {
          "main": [
            [
              {
                "node": "AI Trading Analysis",
                "type": "main",
                "index": 0
              }
            ],
            [
              {
                "node": "Send Error Message",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "AI Trading Analysis": {
          "main": [
            [
              {
                "node": "Send Trading Analysis",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Telegram Trigger1": {
          "main": [
            [
              {
                "node": "Validate Input",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Message a model": {
          "main": [
            [
              {
                "node": "Merge All Data",
                "type": "main",
                "index": 2
              },
              {
                "node": "Parse LLM Response",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Long/Short Ratio": {
          "main": [
            [
              {
                "node": "Merge All Data",
                "type": "main",
                "index": 5
              }
            ]
          ]
        },
        "Parse LLM Response": {
          "main": [
            [
              {
                "node": "Get Price Data (CoinGecko)",
                "type": "main",
                "index": 0
              },
              {
                "node": "Get Coin Info (CoinGecko)",
                "type": "main",
                "index": 0
              },
              {
                "node": "Get Ticker Info",
                "type": "main",
                "index": 0
              },
              {
                "node": "Get Funding Rate & Open Interest",
                "type": "main",
                "index": 0
              },
              {
                "node": "Get Long/Short Ratio",
                "type": "main",
                "index": 0
              }
            ]
          ]
        },
        "Get Ticker Info": {
          "main": [
            [
              {
                "node": "Merge All Data",
                "type": "main",
                "index": 3
              }
            ]
          ]
        },
        "Get Funding Rate & Open Interest": {
          "main": [
            [
              {
                "node": "Merge All Data",
                "type": "main",
                "index": 4
              }
            ]
          ]
        }
      },
      "settings": {
        "executionOrder": "v1"
      },
      "staticData": null,
      "meta": {
        "templateCredsSetupCompleted": true
      },
      "pinData": {},
      "versionId": "a1e45e56-eedf-4c3d-8b60-b5cec7be5717",
      "triggerCount": 1,
      "shared": [
        {
          "createdAt": "2025-08-24T15:09:28.081Z",
          "updatedAt": "2025-08-24T15:09:28.081Z",
          "role": "workflow:owner",
          "workflowId": "zdAfk6jqmDfErDfo",
          "projectId": "2QCRxmkFCwxqPeZI",
          "project": {
            "createdAt": "2025-08-19T11:18:20.915Z",
            "updatedAt": "2025-08-19T12:58:17.701Z",
            "id": "2QCRxmkFCwxqPeZI",
            "name": "Ali Zain <alizain@ideofuzion.com>",
            "type": "personal",
            "icon": null,
            "description": null,
            "projectRelations": [
              {
                "createdAt": "2025-08-19T11:18:20.916Z",
                "updatedAt": "2025-08-19T11:18:20.916Z",
                "role": "project:personalOwner",
                "userId": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                "projectId": "2QCRxmkFCwxqPeZI",
                "user": {
                  "createdAt": "2025-08-19T11:18:19.926Z",
                  "updatedAt": "2025-08-25T05:01:09.000Z",
                  "id": "2613c1ea-83b5-4a34-b164-379ed1c73fe3",
                  "email": "alizain@ideofuzion.com",
                  "firstName": "Ali",
                  "lastName": "Zain",
                  "personalizationAnswers": {
                    "version": "v4",
                    "personalization_survey_submitted_at": "2025-08-19T12:58:40.255Z",
                    "personalization_survey_n8n_version": "1.107.3",
                    "companySize": "<20",
                    "companyType": "saas",
                    "role": "business-owner",
                    "reportedSource": "google"
                  },
                  "settings": {
                    "userActivated": true,
                    "easyAIWorkflowOnboarded": true,
                    "firstSuccessfulWorkflowId": "w7k9ejgAD16tskZl",
                    "userActivatedAt": 1755865100277
                  },
                  "role": "global:owner",
                  "disabled": false,
                  "mfaEnabled": false,
                  "lastActiveAt": "2025-08-25",
                  "isPending": false
                }
              }
            ]
          }
        }
      ],
      "tags": []
    },
    "metadata": {
      "version": "a1e45e56-eedf-4c3d-8b60-b5cec7be5717",
      "tags": [],
      "category": "automation",
      "createdAt": "2025-08-25T11:32:01.362Z",
      "updatedAt": "2025-08-25T11:32:01.362Z"
    },
    "status": "inactive",
    "createdAt": "2025-08-25T11:32:01.362Z",
    "updatedAt": "2025-08-25T11:32:01.362Z"
  }
]