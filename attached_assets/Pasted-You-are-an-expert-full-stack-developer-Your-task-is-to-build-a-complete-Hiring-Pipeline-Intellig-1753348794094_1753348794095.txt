You are an expert full-stack developer. Your task is to build a complete "Hiring Pipeline & Intelligence Platform" on Replit.

1. Technology Stack:

Framework: Full-Stack MERN.

Frontend: React (using Vite) with Tailwind CSS for styling. Use axios for API calls and react-beautiful-dnd for the Kanban board's drag-and-drop functionality.

Backend: Node.js with the Express.js framework.

Database: MongoDB with Mongoose for data modeling.

Authentication: Use JSON Web Tokens (JWT) for secure, stateless user sessions.

Real-time: Use Socket.IO for live updates in the "Live Interview Hub".

2. Database Models (Mongoose Schemas):

Please define the following Mongoose schemas:

User:

name: String, required

email: String, required, unique

password: String, required

Job:

title: String, required

description: String

requiredSkills: [String]

status: String (e.g., 'Open', 'Closed'), default 'Open'

Candidate:

name: String, required

email: String, required

cvUrl: String

status: String, required (e.g., 'New', 'Qualified', 'Interview Scheduled', 'Analysis Complete', 'Hired', 'Rejected')

jobAppliedFor: { type: Schema.Types.ObjectId, ref: 'Job' }

interviewDetails: {

dateTime: Date,

meetingLink: String,

notes: String

}

analysis: {

transcript: String,

summary: String,

technicalScore: Number,

psychometricAnalysis: String,

finalRecommendation: String

}

3. Backend API (Express Routes):

Create a well-structured API with the following endpoints:

Authentication:

POST /api/auth/register: Create a new user.

POST /api/auth/login: Log in a user and return a JWT.

Candidates:

GET /api/candidates: Fetch all candidates.

PUT /api/candidates/:id: Update a candidate's details (especially the status for the Kanban board).

N8N Integration (Callback Endpoints): These are crucial endpoints that n8n will call.

POST /api/n8n/update-candidate: Receives data from Workflow 1 to update a candidate's status, schedule interviews, etc.

POST /api/n8n/live-data/:interviewId: Receives live transcripts/questions from Workflow 2 and uses Socket.IO to push them to the correct client.

POST /api/n8n/final-report/:candidateId: Receives the final analysis from Workflow 2 and saves it to the candidate's document in the database.

4. Frontend Components (React):

Structure the frontend with the following components:

pages/LoginPage.jsx, pages/SignupPage.jsx

pages/DashboardPage.jsx: The main landing page after login.

pages/PipelinePage.jsx: The page that will host the Kanban board.

pages/LiveInterviewHub.jsx: The 3-panel view for live interviews.

components/KanbanBoard.jsx: Manages the columns and draggable CandidateCard.jsx components.

components/DashboardWidgets/: A folder for widgets like HiringFunnel.jsx and UpcomingInterviews.jsx.

components/ui/: For reusable elements like Button.jsx, Card.jsx, Modal.jsx.

5. Core Functionality & N8N Webhook Integration:

This is the most important part. Implement the logic for calling your n8n webhooks.

Functionality 1: Syncing CVs

Create a "Sync New CVs" button on the DashboardPage.

When this button is clicked, it must trigger a POST request using axios to the following n8n webhook URL:
https://ali-shoaib.app.n8n.cloud/webhook-test/9f3916ff-5ef8-47e2-8170-fea53c456554

Functionality 2: Starting the Interview Bot

On the LiveInterviewHub.jsx page, when the component loads or when the user clicks a "Start Session" button, trigger a POST request using axios to the second n8n webhook URL. This request should include the meeting ID.
https://ali-shoaib.app.n8n.cloud/webhook-test/022f198b-9bb8-4ec8-8457-53df00516dbb

6. Styling:

Use Tailwind CSS to implement the clean, professional, data-driven UI we designed.

The primary color scheme should be cool blues and neutral grays, with green as a prominent accent color for success states and primary actions.

Ensure the entire application is responsive and mobile-friendly.

Please generate the initial file structure and starter code for this full-stack MERN application with all the specified features and integrations.